stylesheet "1.0";

output method="xml" encoding="utf-8" indent="yes";
output doctype-public="-//W3C//DTD XHTML 1.1//EN";
output doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd";
output omit-xml-declaration="no";

include utils/strings.xsl;
include utils/tokens.xsl;

//////////////////////////////////////////////////////////////////////
/// Parameters
//////////////////////////////////////////////////////////////////////

// The style of the proof output.
#style = { "gentzen"; }

//////////////////////////////////////////////////////////////////////
/// Utilities
//////////////////////////////////////////////////////////////////////

tpl list (#separ, #elems) {
 for-each [$elems] {
  apply[.];
  if [not(position()=last())] { copy-of $separ; } }
}

//////////////////////////////////////////////////////////////////////
/// Sanity checks as templates
//////////////////////////////////////////////////////////////////////

// Derivation sanity checks

tpl [Derivation[not(child::Rule)]] mode="sanity-check" {
  die (#message = "We require that a Derivatiion element have a Rule child!");
}

tpl [Derivation[child::Rule[2]]] mode="sanity-check" {
  die (#message = "We require that a Derivation element have at most one Rule child!");
}

tpl [Derivation[child::Rule[not(@name)]]] mode="sanity-check" {
  die (#message = "We require that the Rule child elements of Derivations have a name attribute!");
}

tpl [Derivation[child::Rule
                and child::Rule/@name
                and not(child::Rule[@name = "implication-elimination"])
                and not(child::Rule[@name = "axiom"])
                and not(child::Rule[@name = "definition"])
                and not(child::Rule[@name = "by"])]] mode="sanity-check" {
  $n = `Rule/@name`;
  $message = `concat ("We require that a Derivation have a Rule child whose name is either&#xa;&#xa;  * implication-elimination&#xa;  * axiom&#xa;  * definition&#xa;  * by&#xa;&#xa;but we encountered a Derivation whose Rule child has the name&#xa;&#xa;  ", $n, "&#xa;&#xa;We don't know how to proceed.")`;
  die (#message = $message);
}

// Rule sanity checks

tpl [Rule[not(@name)]] mode="sanity-check" {
  die (#message = "We require that all Rule elements have a name attribute!");
}

// Formula and term sanity checks

tpl [defined-predicate[not(@name)]] mode="sanity-check" {
  die (#message = "We require that a defined-predicate element have a name attribute!");
}

tpl [defined-predicate[@name and not(@name = "true")]] mode="sanity-check" {
  $n = `@name`;
  $message = `concat ("We don't know how to deal with a defined predicate whose name is not 'true' (the name is '", $n, "'")`;
  die (#message = $message);
}

tpl [variable[not(@name)]] mode="sanity-check" {
  die (#message = "We require that variables have a name attribute!");
}

tpl [predicate[not(@name)]] mode="sanity-check" {
  die (#message = "We require that a variable have a name attribute!");
}

tpl [predicate[@name = "=" and not(child::*[2])]] mode="sanity-check" {
  die (#message = "We require that an equality predicate element have at least two children!");
}

tpl [predicate[@name = "=" and child::*[3]]] mode="sanity-check" {
  die (#message = "We require that an equality predicate element have fewer than three children!");
}

tpl [function[not(@name)]] mode="sanity-check" {
  die (#message = "We require that a function have a name attribute!");
}

tpl [quantifier[not(@type)]] mode="sanity-check" {
  die (#message = "Quantifiers must have a type attribute, but we found one that lacks this attribute!");
}

tpl [quantifier[@type and not(@type = "universal" or @type = "existential")]] mode="sanity-check" {
  die (#message = "We assume that quantifiers are either universal or existential!");
}

tpl [quantifer[not(child::variable)]] mode="sanity-check" {
  die (#message = "We require that quantifiers have at least one variable child!");
}

tpl [quantifier[not(child::*[2])]] mode="sanity-check" {
  die (#message = "We require that quantifiers have at least two child elements!");
}

// Numerals

tpl [number[not(@name)]] mode="sanity-check" {
  die (#message = "We require that numbe elements have a name attribute!");
}

// Toplevel sanity check

tpl [/] mode="sanity-check" {

  if [not(Derivation)] {
    die (#message = "A Derivation root element is missing!");
  }

  apply [descendant::Derivation] mode="sanity-check";
  apply [descendant::Rule] mode="sanity-check";
  apply [descendant::defined-predicate] mode="sanity-check";
  apply [descendant::variable] mode="sanity-check";
  apply [descendant::predicate] mode="sanity-check";
  apply [descendant::function] mode="sanity-check";
  apply [descendant::quantifier] mode="sanity-check";
  apply [descendant::number] mode="sanity-check";
}

//////////////////////////////////////////////////////////////////////
/// The meat
//////////////////////////////////////////////////////////////////////

tpl [/] {
  apply [.] mode="sanity-check"; // don't proceed unless the sanity checks pass

  // The proof styles we support.
  //
  // We define the value of this variable here, rather than as a
  // stlyehseet parameter, to prevent users from tampering with the
  // value.
  $styles = ",gentzen,";

  $styles-string = render-token-string (#token-string = $styles,
                                        #before-item = "  * ",
                                        #after-item = "&#xa;");

  // style paramter sanity check
  $member = item-in-token-list (#token-list = $styles, #item = $style);
  if [$member = "0"] {
    $message = `concat ("The value supplied for the 'style' parameter,&#xa;&#xa;  ", $style, "&#xa;&#xa;is not acceptable.  The only acceptable values for the stylesheet parameter 'style' are:&#xa;&#xa;", $styles-string, "&#xa")`;
    die (#message = $message);
  }

  <html {
    @"xmlns" = "http://www.w3.org/1999/xhtml";
    @xml:lang = "en";
    @"lang" = "en";
    <head {
      <meta {
        @http-equiv = "content-type";
        @content = "text/html; charset=UTF-8";
      }
      <title {
        "hey there";
      }
      <link {
        @rel = "stylesheet";
        @type = "text/css";
        @href = "nd.css";
      }
    }
    <body {
      choose {
        when [$style = "gentzen"] {
          apply [Derivation] mode="gentzen";
        }
        otherwise {
          $message = `concat ("The value supplied for the 'style' parameter,&#xa;&#xa;  ", $style, "&#xa;&#xa;is not acceptable.  The only acceptable values for the stylesheet parameter 'style' are:&#xa;&#xa;", $styles-string, "&#xa")`;
          die (#message = $message);
        }
      }
    }
  }
}

// Rendering Derivation elements

tpl [Derivation[@name and child::Rule[@name = "implication-elimination"]]] mode="gentzen" {
  <table {
    @class = "derivation";
    @summary = `@name`;
    @title = `@name`;
    @"id" = `@name`;
    <caption {
      @class = "derivation-caption";
      `@name`;
    }
    <tr {
      @class = "modus-ponens";
      for-each [Rule] {
        for-each [following-sibling::*] {
          <td {
            apply [.] mode="gentzen";
          }
        }
      }
      <td; // empty cell for the rule name, coming up
    }
    <tr {
      <td {
        @colspan = `count (Rule/following-sibling::*)`;
        <hr;
      }
      <td {
        @class = "rule-name";
        "&#8594;-E";
      }
    }
    <tr {
      <td {
        @colspan = `count (Rule/following-sibling::*)`;
        @class = "rule-conclusion";
        <span {
          @class = "derivation-label";
          `@name`;
        }
        apply [*[1]];
      }
      <td; // empty cell for the rule name, just above
    }
  }
}

tpl [Derivation[@name and child::Rule[@name = "axiom"]]] mode="gentzen" {
  <span {
    @class = "derivation-label";
    `@name`;
  }
  apply [*[1]]; // just the formula
}

tpl [Derivation[@name and child::Rule[@name = "definition"]]] mode="gentzen" {
  <span {
    @class = "derivation-label";
    `@name`;
  }
  apply [*[1]]; // just the formula
}

tpl [Derivation[@name and child::Rule[@name = "by"]]] mode="gentzen" {
  <table {
    @class = "derivation";
    @summary = `@name`;
    @title = `@name`;
    @"id" = `@name`;
    <caption {
      @class = "derivation-caption";
      `@name`;
    }
    <tr {
      for-each [Derivation[@name]] {
        <td {
          apply [.] mode="gentzen";
        }
      }
      <td; // empty cell for the rule name, coming up
    }
    <tr {
      <td {
        @colspan = `count (Derivation[@name])`;
        <hr;
      }
      <td {
        @class = "rule-name";
        "by";
      }
    }
    <tr {
      <td {
        @class = "rule-conclusion";
        @colspan = `count (Derivation[@name])`;
        <span {
          @class = "derivation-label";
          `@name`;
        }
        apply [*[1]];
      }
      <td; // empty cell for the rule name, just above

    }
  }
}

// Rendering formulas

tpl [defined-predicate[@name = "true"]] {
  "&#8868;";
}

// Rendering variables

tpl [variable[@name]] {
  <span {
    @class = "variable";
    `@name`;
  }
}

// Atomic formulas

tpl [predicate[@name = "="]] {
  "(";
  apply [*[1]];
  <span {
    @class = "predicate";
    " = ";
  }
  apply [*[2]];
  ")";
}

tpl [predicate[@name and not(@name = "=")]] {
  $n = `@name`;
  $constructor = `substring-before ($n, "_")`;
  $article = `substring-after ($n, "_")`;
  <span {
    @class = "predicate";
    <span {
      @class = "constructor";
      `$constructor`;
    }
    <sub {
      <span {
        @class = "article";
        `$article`;
      }
    }
  }
  "(";
  list (#separ = ", ", #elems = `*`);
  ")";
}

tpl [function[@name]] {
  $n = `@name`;
  $constructor = { if [contains ($n, "__")] {
                     `substring-before ($n, "__")`;
                   } else {
                     `substring-before ($n, "_")`;
                   }
                 }
  $article = { if [contains ($n, "__")] {
                 `substring-after ($n, "__")`;
               } else {
                 `substring-after ($n, "_")`;
               }
             }
  <span {
    @class = "function";
    <span {
      @class = "constructor";
      `$constructor`;
     }
    <sub {
      <span {
        @class = "article";
        `$article`;
      }
    }
  }
  if [*] {
    "("; list (#separ = ", ", #elems = `*`); ")";
  }
}

// Complex formulas: binary connectives

tpl [*[not(child::*[2])]] mode="binary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent binary connectives, but we have found such an element that lacks two children")`;
  die (#message = $message);
}

tpl [*[child::*[3]]] mode="binary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent binary connectives, but we have found such an element that has more than two children")`;
  die (#message = $message);
}

tpl [*] (#connective) mode="binary-connective" {
  <span {
    @class = "formula";
    apply [*[1]]; " "; `$connective`; " "; apply [*[2]];
  }
}

tpl [implication] {
  apply [.] (#connective = "&#8594;") mode="binary-connective";
}

tpl [equivalence] {
  apply [.] (#connective = "&#8596;") mode="binary-connective";
}

tpl [disjunction] {
  apply [.] (#connective = "&#8744;") mode="binary-connective";
}

tpl [conjunction] {
  apply [.] (#connective = "&#8743;") mode="binary-connective";
}

// Complex formulas: unary connectives

tpl [*[not(child::*)]] mode="unary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent unary connectives, but we have found such an element that lacks a child!")`;
  die (#message = $message);
}

tpl [*[child::*[3]]] mode="unary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent unary connectives, but we have found such an element that has more than one child")`;
  die (#message = $message);
}

tpl [*] (#connective) mode="unary-connective" {
  <span {
    @class = "formula";
    `$connective`; apply [*[1]];
  }
}

tpl [negation] {
  apply [.] (#connective = "&#172;") mode="unary-connective";
}

// Rendering quantifiers

tpl [quantifier[@type = "universal" or @type = "existential"]] {
  $type = `@type`;
  <span {
    @class = "formula";
    if [$type = "universal"] {
      "&#8704;";
    } else {
      "&#8707;";
    }
    list (#elems = `variable`, #separ = ", ");
    "["; apply [*[position() = last()]]; "]";
  }
}
