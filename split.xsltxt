stylesheet 1.0;

output method=xml indent="yes";

tpl die(#message) {
  if [@line and @col] {
    $line = `@line`;
    $col = `@col`;
    $final_message = `concat ($message, " (line ", $line, ", column ", $col, ")")`;
    msg terminate="yes" $final_message;
  } else {
    $final_message = `concat ($message, " (unable to determine line and column information)")`;
    msg terminate="yes" $final_message;
  }
}

tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [Text-Proper/Item[@kind = "Reservation"]] {
  $type = `*[position() = last()]`;
  $num-previous-toplevel = `count (preceding-sibling::Item[@kind = "Reservation" or @kind = "Private-Functor-Definition" or @kind = "Choice-Statement" or @kind = "Constant-Definition" or @kind = "Type-Changing-Statement" or (@kind = "Regular-Statement" and @shape = "Diffuse-Statement")] | preceding::Item[@kind = "Loci-Declaration"])`;
  for-each [Variables] {
    if [Variable] {
      for-each [Variable] {
        <Item {
          for-each [@*] { copy-of `.`; }
          @kind = "Reservation";
          @toplevel-binder-number = `position() + $num-previous-toplevel`;
          if [@idnr] {
            @idnr = `@idnr`;
          } else {
            die (#message = "We found a variable that lacks an idnr attribute; unable to proceed.");
          }
          <Variables {
            apply [.];
          }
          apply [$type];
        }
      }
    } else {
      die (#message = "We expected to find at least one Variable child of a Variables element, but there are no such children");
    }
  }
}

tpl [Text-Proper/Item[@kind = "Private-Predicate-Definition" or @kind = "Private-Functor-Definition" or @kind = "Constant-Definition"]] {
  if [Variable[2]] {
    die (#message = "We assume that private predicate/functor definitions bind at most one variable, but we found one that binds at least two!");
  }
  <Item {
    for-each [@*] { copy-of `.`; }
    @toplevel-binder-number = `count (preceding-sibling::Item[@kind = "Reservation" or @kind = "Private-Functor-Definition" or @kind = "Choice-Statement" or @kind = "Constant-Definition" or @kind = "Type-Changing-Statement" or (@kind = "Regular-Statement" and @shape = "Diffuse-Statement")] | preceding::Item[@kind = "Loci-Declaration"]) + 1`;
    @idnr = `Variable[1]/@idnr`;
    apply [*];
  }
}

// These kinds of statements present problems for my analysis.  One can introduce spurious variables and types, e.g.:
//
// consider A being set, B being Jordan-Curve such that A1: A = B or A <> B;
//
// Lm: <something about A alone, not B>
//
// I can't just split up the choice statement into two separate ones
// because the property that the introduced variables satisfy involves
// both variables (A and B occur in "A = B or A <> B")
tpl [Text-Proper/Item[@kind = "Choice-Statement"]] {
  <Item {
    for-each [@*] { copy-of `.`; }
    @toplevel-binder-number = `count (preceding-sibling::Item[@kind = "Reservation" or @kind = "Private-Functor-Definition" or @kind = "Choice-Statement" or @kind = "Constant-Definition" or @kind = "Type-Changing-Statement" or (@kind = "Regular-Statement" and @shape = "Diffuse-Statement")] | preceding::Item[@kind = "Loci-Declaration"]) + 1`;
    apply [*];
  }
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement"]] {
  $type = `*[position() = last()]`;
  $num-previous-toplevel = `count (preceding-sibling::Item[@kind = "Reservation" or @kind = "Private-Functor-Definition" or @kind = "Choice-Statement" or @kind = "Constant-Definition" or @kind = "Type-Changing-Statement" or (@kind = "Regular-Statement" and @shape = "Diffuse-Statement")] | preceding::Item[@kind = "Loci-Declaration"])`;
  for-each [Variable] {
    <Item {
      for-each [@*] { copy-of `.`; }
      @kind = "Type-Changing-Statement";
      @toplevel-binder-number = `position() + $num-previous-toplevel`;
      apply [.];
      apply [$type];
    }
  }
}

tpl [Text-Proper/Item[@kind = "Regular-Statement"]] {
  <Item {
    for-each [@*] { copy-of `.`; }
    if [Label] {
      @idnr = `Label[1]/@idnr`;
    } else {
      @idnr = "";
    }
    if [@shape = "Diffuse-Statement"] {
      $num-previous-toplevel = `count (preceding-sibling::Item[@kind = "Reservation" or @kind = "Private-Functor-Definition" or @kind = "Choice-Statement" or @kind = "Constant-Definition" or @kind = "Type-Changing-Statement" or (@kind = "Regular-Statement" and @shape = "Diffuse-Statement")] | preceding::Item[@kind = "Loci-Declaration"])`;
      @toplevel-binder-number = `$num-previous-toplevel + 1`;
    }
    apply [*];
  }
}

tpl [Text-Proper/Item[@kind = "Constant-Definition"]] {
  <Item {
    for-each [@*] { copy-of `.`; }
    @idnr = `Variable[1]/@idnr`;
    $num-previous-toplevel = `count (preceding-sibling::Item[@kind = "Reservation" or @kind = "Private-Functor-Definition" or @kind = "Choice-Statement" or @kind = "Constant-Definition" or @kind = "Type-Changing-Statement" or (@kind = "Regular-Statement" and @shape = "Diffuse-Statement")] | preceding::Item[@kind = "Loci-Declaration"])`;
    @toplevel-binder-number = `$num-previous-toplevel + 1`;
    apply [*];
  }
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement"]] {
  <Item {
    for-each [@*] { copy-of `.`; }
    @idnr = `Equality/Variable[1]/@idnr`;
    $num-previous-toplevel = `count (preceding-sibling::Item[@kind = "Reservation" or @kind = "Private-Functor-Definition" or @kind = "Choice-Statement" or @kind = "Constant-Definition" or @kind = "Type-Changing-Statement" or (@kind = "Regular-Statement" and @shape = "Diffuse-Statement")] | preceding::Item[@kind = "Loci-Declaration"])`;
    @toplevel-binder-number = `$num-previous-toplevel + 1`;
    apply [*];
  }
}

tpl [Item[@kind = "Loci-Declaration"]] {
  $loci = `.`;
  if [Implicitly-Qualified-Segment] {
    for-each [Implicitly-Qualified-Segment] {
      if [Variable] {
        for-each [Variable] {
          <Item {
            for-each [$loci/@*] { copy-of `.`; }
            $num_preceding = `count (preceding::Item[@kind = "Loci-Declaration"] | preceding::Item[@kind = "Reservation"] | preceding::Item[@kind = "Private-Functor-Definition" and parent::Text-Proper] | preceding::Item[@kind = "Choice-Statement" and parent::Text-Proper] | preceding::Item[@kind = "Constant-Definition" and parent::Text-Proper] | preceding::Item[@kind = "Type-Changing-Statement" and parent::Text-Proper] | preceding::Item[@kind = "Regular-Statement" and @shape = "Diffuse-Statement" and parent::Text-Proper])`;
            @toplevel-binder-number = `$num_preceding + 1`;
            @idnr = `@idnr`;
            <Implicitly-Qualified-Segment {
              apply [.]; // variable
            }
          }
        }
      } else {
        die (#message = "We expected to find at least one Variable child of the current Variables element, but there is no such child");
      }
    }
  }
  if [Explicitly-Qualified-Segment] {
    for-each [Explicitly-Qualified-Segment] {
      if [Variables] {
        for-each [Variables] {
          if [Variable] {
            for-each [Variable] {
              <Item {
                for-each [$loci/@*] { copy-of `.`; }
                $num_preceding = `count (preceding::Item[@kind = "Loci-Declaration"] | preceding::Item[@kind = "Reservation"] | preceding::Item[@kind = "Private-Functor-Definition" and parent::Text-Proper] | preceding::Item[@kind = "Choice-Statement" and parent::Text-Proper] | preceding::Item[@kind = "Constant-Definition" and parent::Text-Proper] | preceding::Item[@kind = "Type-Changing-Statement" and parent::Text-Proper] | preceding::Item[@kind = "Regular-Statement" and @shape = "Diffuse-Statement" and parent::Text-Proper])`;
                @toplevel-binder-number = `$num_preceding + 1`;
                @idnr = `@idnr`;
                <Explicitly-Qualified-Segment {
                  <Variables {
                    apply [.]; // variable
                  }
                  apply [../../*[position() = last()]]; // the type of the variable
                }
              }
            }
          } else {
            die (#message = "We expected to find at least one Variable child of the current Variables element, but there is no such child");
          }
        }
      } else {
          die (#message = "We expected to find a Variables child of the current Explicitly-Qualified-Segment child, but there is no such child.");
      }
    }
  }
}

tpl [Item[@kind="Definition-Item"]] {
  apply [Block];
}

tpl [Block[@kind="Definitional-Block"]] {
  apply [Item[@kind = "Attribute-Definition" or @kind = "Functor-Definition" or @kind = "Predicate-Definition" or @kind = "Mode-Definition" or @kind = "Structure-Definition"]](#definitions = `Item[@kind = "Private-Predicate-Definition" or @kind="Private-Functor-Definition"]`);
}

tpl [Block[@kind = "Registration-Block"]] {
  apply [Item[@kind = "Cluster"]];
}

tpl [Block[@kind = "Notation-Block"]] {
  apply [Item[@kind = "Pred-Antonym" or @kind = "Pred-Synonym" or @kind = "Attr-Antonym" or @kind = "Attr-Synonym" or @kind = "Func-Synonym" or @kind = "Func-Antonym" or @kind = "Mode-Synonym" or @kind = "Mode-Antonym"]];
}

tpl [Item[@kind = "Cluster"]] {
  <Item {
    @kind = "Definition-Item";
    if [@line] { @line = `@line`; }
    if [@col] { @col = `@col`; }
    <Block {
      @kind = "Registration-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"]] {
        apply [.];
      }
      <Item {
        @kind = "Cluster";
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}

tpl correctness-conditions (#candidates, #definitions, #stop) {
  if [not($stop = "1")] {
    if [$candidates] {
      $candidate = `$candidates[1]`;
      for-each [$candidate] {
        $candidate_name = `local-name(.)`;
        $candidate_kind = `$candidate/@kind`;
        if [$candidate_name = "Item" and ($candidate_kind = "Correctness-Condition" or $candidate_kind = "Property" or $candidate_kind = "Correctness")] {
          apply [$candidate](#definitions = $definitions);
          correctness-conditions (#candidates = `$candidates[position() > 1]`,
                                  #definitions = $definitions);
        } else {
          correctness-conditions (#stop = "1");
        }
      }
    }
  }
}

tpl [Item[@kind = "Correctness-Condition" or @kind = "Property" or @kind = "Correctness"]](#definitions) {
  <Item {
    for-each [@*] { copy-of `.`; }
    apply [*](#definitions = $definitions);
  }
}

tpl [Item[@kind = "Theorem-Item"]] {
  <Item {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [Block[@kind = "Proof"]](#definitions) {
  $context = `.`;
  <Block {
    @kind = "Proof";
    if [$definitions] {
      for-each [$definitions] {
        if [Variable] {
          $idnr = `Variable[1]/@idnr`;
          if [$context//Private-Predicate-Formula[@idnr = $idnr] or $context//Private-Functor-Term[@idnr = $idnr]] {
            copy-of `.`;
          }
        } else {
          die (#message = "While determining whether to possibly include some local definitions into a proof, we encountered a local definition that lacks a Variable child");
        }
      }
    }
    apply [*];
  }
}

tpl [Item[@kind = "Functor-Definition" or @kind = "Attribute-Definition" or @kind = "Predicate-Definition" or @kind = "Mode-Definition" or @kind = "Structure-Definition"]](#definitions) {
  <Item {
    for-each [@*] { copy-of `.`; }
    @kind = "Definition-Item";
    <Block {
      @kind = "Definitional-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration" or @kind = "Assumption" or @kind = "Existential-Assumption"]] {
        apply [.];
      }
      <Item {
        for-each [@*] { copy-of `.`; }
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`, #definitions = $definitions);
    }
  }
}

tpl [Item[@kind = "Pred-Synonym" or @kind = "Pred-Antonym" or @kind = "Attr-Synonym" or @kind = "Attr-Antonym" or @kind = "Func-Synonym" or @kind = "Func-Antonym" or @kind = "Mode-Synonym" or @kind = "Mode-Antonym"]] {
  <Item {
    @kind = "Definition-Item";
    <Block {
      @kind = "Notation-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"]] {
        apply [.];
      }
      <Item {
        @kind = `@kind`;
        if [@line] { @line = `@line`; }
        if [@col] { @col = `@col`; }
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}

tpl split-explicitly-qualified-segment (#variables, #type) {
  if [$variables] {
    $variable = `$variables[1]`;
    <Explicitly-Qualified-Segment {
      <Variables {
        apply [$variable];
      }
      apply [$type];
    }
    split-explicitly-qualified-segment (#variables = `$variables[position() > 1]`,
                                        #type = $type);
  }
}

tpl [Explicitly-Qualified-Segment] {
  split-explicitly-qualified-segment (#variables = `Variables/Variable`,
                                      #type = `*[position() = last()]`);
}

// don't break up explicitly qualified segments inside universal formulas...yet
tpl [Universal-Quantifier-Formula/Explicitly-Qualified-Segment] {
  <Explicitly-Qualified-Segment {
    apply [*];
  }
}

tpl [Existential-Quantifier-Formula/Explicitly-Qualified-Segment] {
  <Explicitly-Qualified-Segment {
    apply [*];
  }
}