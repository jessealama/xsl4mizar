stylesheet 1.0;

output method=xml indent="yes";

include die.xsl;

tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl count-preceding-eliminable-toplevel-items {
  `count (preceding::Item[@kind = "Reservation" or @kind = "Private-Functor-Definition" or @kind = "Choice-Statement" or @kind = "Constant-Definition" or @kind = "Type-Changing-Statement" or @kind = "Private-Predicate-Definition" or (@kind = "Regular-Statement" and @shape = "Diffuse-Statement") or (@kind = "Regular-Statement" and child::Proposition[descendant::Simple-Term/@idnr = preceding::Item[parent::Text-Proper and @kind = "Constant-Definition"]/Variable/@idnr or descendant::Simple-Term/@idnr = preceding::Item[parent::Text-Proper and @kind = "Type-Changing-Statement"]/Equality/Variable/@idnr or descendant::Simple-Term/@idnr = preceding::Item[parent::Text-Proper and @kind = "Type-Changing-Statement"]/Variable/@idnr])] | preceding::Item[@kind = "Loci-Declaration"])`;
}

tpl [Text-Proper/Item[@kind = "Reservation" and not(child::Variables)]] {
  die (#message = "We require that a Reservation item have a Variables child!");
}

tpl [Text-Proper/Item[@kind = "Reservation"]] {
  $context = `.`;
  $type = `*[position() = last()]`;
  $num-previous-toplevel = count-preceding-eliminable-toplevel-items ();
  // sanity check: all Variable descendants have an idnr attribute
  for-each [Variables/Variable[not(@idnr)]] {
    die (#message = "We found a variable that lacks an idnr attribute; unable to proceed.");
  }
  for-each [Variables/Variable] {
    <Item {
      for-each [$context/@*] { copy-of `.`; }
      @toplevel-binder-number = `position() + $num-previous-toplevel`;
      @idnr = `@idnr`;
      <Variables {
        apply [.];
      }
      apply [$type];
    }
  }
}

tpl [Text-Proper/Item[@kind = "Private-Predicate-Definition" or @kind = "Private-Functor-Definition" or @kind = "Constant-Definition"]] {
  if [Variable[2]] {
    die (#message = "We assume that private predicate/functor definitions bind at most one variable, but we found one that binds at least two!");
  }
  <Item {
    for-each [@*] { copy-of `.`; }
    $num-previous = count-preceding-eliminable-toplevel-items ();
    @toplevel-binder-number = `$num-previous + 1`;
    @idnr = `Variable[1]/@idnr`;
    apply [*];
  }
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement" and child::Equality]] {
  $num-children = `count (*)`;
  $justification = `*[position() = $num-children]`;
  $num-children-minus-one = `$num-children - 1`;
  $type = `*[position() = $num-children-minus-one]`;
  $num-previous-toplevel = count-preceding-eliminable-toplevel-items ();
  for-each [Equality] {
    $variable = `Variable`;
    $variable-idnr = `$variable/@idnr`;
    $definiens = `*[position() = last()]`;
    <Item {
      for-each [@*] { copy-of `.`; }
      @kind = "Type-Changing-Statement";
      @toplevel-binder-number = `position() + $num-previous-toplevel`;
      @idnr = $variable-idnr;
      <Equality {
        apply [$variable];
        apply [$definiens];
      }
      apply [$type];
      apply [$justification];
    }
  }
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement" and not(child::Equality)]] {
  $num-children = `count (*)`;
  $justification = `*[position() = $num-children]`;
  $num-children-minus-one = `$num-children - 1`;
  $type = `*[position() = $num-children-minus-one]`;
  $num-previous-toplevel = count-preceding-eliminable-toplevel-items ();
  $variable = `Variable`;
  $variable-idnr = `$variable/@idnr`;
  <Item {
    for-each [@*] { copy-of `.`; }
    @kind = "Type-Changing-Statement";
    @toplevel-binder-number = `$num-previous-toplevel + 1`;
    @idnr = $variable-idnr;
    apply [$variable];
    apply [$type];
    apply [$justification];
  }
}

tpl [Text-Proper/Item[@kind = "Regular-Statement"]] {
  <Item {
    for-each [@*] { copy-of `.`; }
    choose {
      when [Proposition/Label] {
        @idnr = `Proposition/Label[1]/@idnr`;
      }
      when [@shape = "Diffuse-Statement" and Label] {
        @idnr = `Label[1]/@idnr`;
      }
      otherwise {
        @idnr = "";
      }
    }
    $num-previous-toplevel = count-preceding-eliminable-toplevel-items ();
    @toplevel-binder-number = `$num-previous-toplevel + 1`;
    apply [*];
  }
}

tpl [Item[@kind = "Loci-Declaration" and child::Explicitly-Qualified-Segment]] {
  $loci = `.`;
  $type = `Explicitly-Qualified-Segment/*[position() = last()]`;
  $num_preceding = count-preceding-eliminable-toplevel-items ();
  for-each [Explicitly-Qualified-Segment/Variables/Variable] {
    $pos = `position ()`;
    <Item {
      for-each [$loci/@*] { copy-of `.`; }
      @toplevel-binder-number = `$num_preceding + $pos`;
      @idnr = `@idnr`;
      <Explicitly-Qualified-Segment {
        <Variables {
          apply [.]; // variable
        }
        apply [$type]; // the type of the variable
      }
    }
  }
}

tpl [Item[@kind = "Loci-Declaration" and child::Implicitly-Qualified-Segment]] {
  $loci = `.`;
  $variable = `Implicitly-Qualified-Segment/Variable[1]`;
  $variable-idnr = `$variable/@idnr`;
  $num_preceding = count-preceding-eliminable-toplevel-items ();
  <Item {
    for-each [$loci/@*] { copy-of `.`; }
    @toplevel-binder-number = `$num_preceding + 1`;
    @idnr = $variable-idnr;
    <Implicitly-Qualified-Segment {
      apply [$variable];
    }
  }
}

tpl [Item[@kind="Definition-Item"]] {
  $context = `.`;
  apply [Block] (#context = $context);
}

tpl [Block[@kind="Definitional-Block"]] (#context) {
  apply [Item[@kind = "Attribute-Definition" or @kind = "Functor-Definition" or @kind = "Predicate-Definition" or @kind = "Mode-Definition" or @kind = "Structure-Definition"]](#definitions = `Item[@kind = "Private-Predicate-Definition" or @kind="Private-Functor-Definition"]`, #context = $context);
}

tpl [Block[@kind = "Registration-Block"]] {
  choose {
    when [Item[@kind = "Cluster"]] {
      apply [Item[@kind = "Cluster"]];
    }
    when [Item[@kind = "Identify"]] {
      apply [Item[@kind = "Identify"]];
    }
  }
}

tpl [Block[@kind = "Notation-Block"]] {
  apply [Item[@kind = "Pred-Antonym" or @kind = "Pred-Synonym" or @kind = "Attr-Antonym" or @kind = "Attr-Synonym" or @kind = "Func-Synonym" or @kind = "Func-Antonym" or @kind = "Mode-Synonym" or @kind = "Mode-Antonym"]];
}

tpl [Item[@kind = "Cluster"]] {
  <Item {
    @kind = "Definition-Item";
    if [@line] { @line = `@line`; }
    if [@col] { @col = `@col`; }
    <Block {
      @kind = "Registration-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"]] {
        apply [.];
      }
      <Item {
        @kind = "Cluster";
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}

tpl [Item[@kind = "Identify"]] {
  <Item {
    @kind = "Definition-Item";
    if [@line] { @line = `@line`; }
    if [@col] { @col = `@col`; }
    <Block {
      @kind = "Registration-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"]] {
        apply [.];
      }
      <Item {
        @kind = "Identify";
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}

tpl correctness-conditions (#candidates, #definitions, #stop) {
  if [not($stop = "1")] {
    if [$candidates] {
      $candidate = `$candidates[1]`;
      for-each [$candidate] {
        $candidate_name = `local-name(.)`;
        $candidate_kind = `$candidate/@kind`;
        if [$candidate_name = "Item" and ($candidate_kind = "Correctness-Condition" or $candidate_kind = "Property" or $candidate_kind = "Correctness")] {
          apply [$candidate](#definitions = $definitions);
          correctness-conditions (#candidates = `$candidates[position() > 1]`,
                                  #definitions = $definitions);
        } else {
          correctness-conditions (#stop = "1");
        }
      }
    }
  }
}

tpl [Item[@kind = "Correctness-Condition" or @kind = "Property" or @kind = "Correctness"]](#definitions) {
  <Item {
    for-each [@*] { copy-of `.`; }
    apply [*](#definitions = $definitions);
  }
}

tpl [Item[@kind = "Theorem-Item"]] {
  <Item {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [Block[@kind = "Proof"]](#definitions) {
  $context = `.`;
  <Block {
    @kind = "Proof";
    if [$definitions] {
      for-each [$definitions] {
        if [Variable] {
          $idnr = `Variable[1]/@idnr`;
          if [$context//Private-Predicate-Formula[@idnr = $idnr] or $context//Private-Functor-Term[@idnr = $idnr]] {
            copy-of `.`;
          }
        } else {
          die (#message = "While determining whether to possibly include some local definitions into a proof, we encountered a local definition that lacks a Variable child");
        }
      }
    }
    apply [*];
  }
}

tpl [Item[@kind = "Functor-Definition" or @kind = "Attribute-Definition" or @kind = "Predicate-Definition" or @kind = "Mode-Definition" or @kind = "Structure-Definition"]](#definitions, #context) {
  <Item {
    for-each [$context/@*] { copy-of `.`; }
    @kind = "Definition-Item";
    <Block {
      @kind = "Definitional-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration" or @kind = "Assumption" or @kind = "Existential-Assumption" or @kind = "Constant-Definition"]] {
        apply [.];
      }
      <Item {
        for-each [@*] { copy-of `.`; }
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`, #definitions = $definitions);
    }
  }
}

tpl [Item[@kind = "Pred-Synonym" or @kind = "Pred-Antonym" or @kind = "Attr-Synonym" or @kind = "Attr-Antonym" or @kind = "Func-Synonym" or @kind = "Func-Antonym" or @kind = "Mode-Synonym" or @kind = "Mode-Antonym"]] {
  <Item {
    @kind = "Definition-Item";
    <Block {
      @kind = "Notation-Block";
      for-each [preceding-sibling::Item[@kind = "Loci-Declaration"]] {
        apply [.];
      }
      <Item {
        @kind = `@kind`;
        if [@line] { @line = `@line`; }
        if [@col] { @col = `@col`; }
        apply [*];
      }
      correctness-conditions (#candidates = `following-sibling::*`);
    }
  }
}

tpl split-explicitly-qualified-segment (#variables, #type) {
  if [$variables] {
    $variable = `$variables[1]`;
    <Explicitly-Qualified-Segment {
      <Variables {
        apply [$variable];
      }
      apply [$type];
    }
    split-explicitly-qualified-segment (#variables = `$variables[position() > 1]`,
                                        #type = $type);
  }
}

tpl [Item[@kind = "Generalization" and child::Explicitly-Qualified-Segment]] {
  $type = `Explicitly-Qualified-Segment/*[position() = last()]`;
  for-each [Explicitly-Qualified-Segment/Variables/Variable] {
    <Item {
      for-each [@*] { copy-of `.`; }
      @kind = "Generalization";
      <Explicitly-Qualified-Segment {
        <Variables {
          apply [.];
        }
        apply [$type];
      }
    }
  }
}

tpl [Explicitly-Qualified-Segment[not(parent::Item[@kind = "Choice-Statement"])]] {
  split-explicitly-qualified-segment (#variables = `Variables/Variable`,
                                      #type = `*[position() = last()]`);
}

// don't break up explicitly qualified segments inside universal formulas...yet
tpl [Universal-Quantifier-Formula/Explicitly-Qualified-Segment] {
  <Explicitly-Qualified-Segment {
    apply [*];
  }
}

tpl [Existential-Quantifier-Formula/Explicitly-Qualified-Segment] {
  <Explicitly-Qualified-Segment {
    apply [*];
  }
}