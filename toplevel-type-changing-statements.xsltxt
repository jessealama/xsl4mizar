stylesheet 1.0;

output method=xml indent="yes";

include die.xsl;
include tokens.xsl;

tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement"]] {
  // do nothing when we encounter these in the default processing
  // mode.
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement" and not(child::Equality)]] (#bundlenr, #articleid) {
  die (#message = "We expect a Type-Changing-Statement item to have an Equality child, but we found one that lacks such a child.");
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement" and child::Equality[not(child::Variable)]]] (#bundlenr, #articleid) {
  die (#message = "We expected to find a Variable child of the Equality child of the current Type-Changing-Statement that we are handling, but we found none.");
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement" and child::Equality[child::Variable]]] (#bundlenr, #articleid) {
  $context = `.`;
  $line = `@line`;
  $col = `@col`;
  $equation = `Equality[1]`;
  $variable = `$equation/Variable`;
  $variable-line = `$variable/@line`;
  $variable-col = `$variable/@col`;
  $variable-idnr = `$variable/@idnr`;
  $variable-spelling = `$variable/@spelling`;
  $definiens = `$equation/*[2]`;
  $definiens-line = `$definiens/@line`;
  $definiens-col = `$definiens/@col`;
  $type = `$context/*[2]`;
  $justification = `$context/*[3]`;
  <Item-Bundle {
    if [$bundlenr] { @bundlenr = $bundlenr; }
    if [$articleid] { @articleid = $articleid; }
    @promoted = "type-changing-statement";
    @spelling = $variable-spelling;
    <Text-Proper {
      needed-toplevel-items (#candidates = `preceding-sibling::Item[@kind="Reservation" or @kind = "Private-Predicate-Definition" or (@kind = "Regular-Statement" and child::Diffuse-Statement)]`, #context = $context);
      <Item {
        @kind = "Definition-Item";
        @line = $line;
        @col = $col;
        <Block {
          @kind = "Definitional-Block";
          @line = $line;
          @col = $col;
          <Item {
            @kind = "Functor-Definition";
            <Operation-Functor-Pattern {
              @spelling = $variable-spelling;
              @idnr = $variable-idnr;
              <Loci;
              <Loci;
            }
            <Type-Specification {
              apply [$type];
            }
            <Equals;
            <Definiens {
              @line = $definiens-line;
              @col = $definiens-col;
              <Term-Expression;
              apply [$definiens];
            }
          }
          <Item {
            @kind = "Correctness";
            apply [$justification];
          }
        }
      }
    }
  }
}

tpl [Simple-Term[@idnr = preceding::Item[@kind = "Type-Changing-Statement" and parent::Text-Proper]/Equality/Variable/@idnr]] {
  <Infix-Term {
    for-each [@*] { copy-of `.`; }
    <Arguments;
    <Arguments;
  }
}