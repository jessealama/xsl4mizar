stylesheet 1.0;

output method=xml indent="yes";

include die.xsl;
include tokens.xsl;

tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement"]] {
  // do nothing when we encounter these in the default processing
  // mode.
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement" and not(child::Equality)]] {
  die (#message = "We expect a Type-Changing-Statement item to have an Equality child, but we found one that lacks such a child.");
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement" and child::Equality[not(child::Variable)]]] {
  die (#message = "We expected to find a Variable child of the Equality child of the current Type-Changing-Statement that we are handling, but we found none.");
}

tpl [Simple-Term[@idnr = preceding::Item[@kind = "Type-Changing-Statement" and parent::Text-Proper]/Equality/Variable/@idnr]] {
  <Infix-Term {
    for-each [@*] { copy-of `.`; }
    <Arguments;
    <Arguments;
  }
}