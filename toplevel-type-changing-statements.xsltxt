stylesheet 1.0;

output method=xml indent="yes";

include die.xsl;
include tokens.xsl;

tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [*] (#arguments) mode="plug-placeholders" {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*] (#arguments = $arguments) mode="plug-placeholders";
  }
}

tpl [*] mode="rewrite-placeholder-terms" {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*] mode="rewrite-placeholder-terms";
  }
}

tpl [Placeholder-Term] (#arguments) mode="plug-placeholders" {
  if [not(@nr)] {
    die (#message = "We found a placeholder term that lacks an nr attribute!");
  }
  $nr = `@nr`;
  $num-arguments = `count ($arguments)`;
  if [$num-arguments < $nr] {
    $message = `concat ("We are asked to plug in an expression for position #", $nr, ", but we have only ", $num-arguments, " available")`;
    die (#message = $message);
  }
  $argument = `$arguments[position() = $nr]`;
  if [$argument] {
    apply [$argument];
  } else {
    $message = `concat ("We somehow failed to access argument number ", $nr, " from our list of ", $num-arguments, " arguments")`;
    die (#message = $message);
  }
}

tpl [Placeholder-Term[not(@nr)]] mode="rewrite-placeholder-terms" {
  die (#message = "We found a placeholder term that lacks an nr attribute!");
}

tpl [Placeholder-Term[@nr]] mode="rewrite-placeholder-terms" {
  $nr = `@nr`;
  <Simple-Term {
    @idnr = "0";
    $stub-variable-spelling = `concat ("x", $nr)`;
    @spelling = $stub-variable-spelling;
  }
}

tpl [Text-Proper/Item[@kind = "Type-Changing-Statement"]] {
  // do nothing when we encounter these in the default processing
  // mode.
}

tpl [*] (#arguments) mode="plug-placeholders" {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*] (#arguments = $arguments) mode="plug-placeholders";
  }
}

tpl [Placeholder-Term[not(@nr)]] mode="plug-placeholders" {
  die (#message = "We found a placeholder term that lacks an nr attribute!");
}

tpl [Placeholder-Term[@nr]] (#arguments) mode="plug-placeholders" {
  $nr = `@nr`;
  $num-arguments = `count ($arguments)`;
  if [$num-arguments < $nr] {
    $message = `concat ("We are asked to plug in an expression for position #", $nr, ", but we have only ", $num-arguments, " available")`;
    die (#message = $message);
  }
  $argument = `$arguments[position() = $nr]`;
  if [$argument] {
    apply [$argument];
  } else {
    $message = `concat ("We somehow failed to access argument number ", $nr, " from our list of ", $num-arguments, " arguments")`;
    die (#message = $message);
  }
}

tpl [*] (#arguments) mode="substitute-private-functor-terms" {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*] (#arguments = $arguments) mode="substitute-private-functor-terms";
  }
}
