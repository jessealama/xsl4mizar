stylesheet 1.0;

output method=text;

tpl die(#message) {
  if [@line and @col] {
    $line = `@line`;
    $col = `@col`;
    $final_message = `concat ($message, " (line ", $line, ", column ", $col, ")")`;
    msg terminate="yes" $final_message;
  } else {
    $final_message = `concat ($message, " (unable to determine line and column information)")`;
    msg terminate="yes" $final_message;
  }
}

tpl bound-by-quantifier (#variable) {
  $spelling = `$variable/@spelling`;
  for-each [$variable] {
    if [ancestor::Universal-Quantifier-Formula/Explicitly-Qualified-Segment/Variable[@spelling = $spelling]] {
      "1";
    } else {
      if [ancestor::Universal-Quantifier-Formula/Implicitly-Qualified-Segment/Variable[@spelling = $spelling]] {
        "1";
      } else {
        if [ancestor::Existential-Quantifier-Formula/Explicitly-Qualified-Segment/Variable[@spelling = $spelling]] {
          "1";
        } else {
          if [ancestor::Existential-Quantifier-Formula/Implicitly-Qualified-Segment/Variable[@spelling = $spelling]] {
            "1";
          } else {
            "0";
          }
        }
      }
    }
  }
}

tpl bound-by-item-in-block (#variable, #block, #item) {
  $spelling = `$variable/@spelling`;
  if [$item[@kind = "Choice-Statement"]/Explicitly-Qualified-Segment/Variable[@spelling = $spelling] | $item[@kind = "Choice-Statement"]/Implicitly-Qualified-Segment/Variable[@spelling = $spelling]] {
    "1";
  } else {
    if [$item[@kind = "Generalization"]/Explicitly-Qualified-Segment/Variable[@spelling = $spelling] | $item[@kind = "Generalization"]/Implicitly-Qualified-Segment/Variable[@spelling = $spelling]] {
      "1";
    } else {
      if [$item[@kind = "Loci-Declaration"]/Explicitly-Qualified-Segment/Variable[@spelling = $spelling] | $item[@kind = "Loci-Declaration"]/Implicitly-Qualified-Segment/Variable[@spelling = $spelling]] {
        "1";
      } else {
        if [$item[@kind = "Existential-Assumption"]/Explicitly-Qualified-Segment/Variable[@spelling = $spelling] | $item[@kind = "Existential-Assumption"]/Implicitly-Qualified-Segment/Variable[@spelling = $spelling]] {
          "1";
        } else {
          "0";
        }
      }
    }
  }
}

tpl member (#thing, #nodeset) {
  if [$nodeset] {
    $first = `$nodeset[1]`;
    if [$first = $thing] {
      "1";
    } else {
      member (#thing = $thing,
              #nodeset = `$nodeset[position() > 1]`);
    }
  } else {
    "0";
  }
}

tpl position-of-item-containing-variable (#variable, #candidates) {
  if [$candidates] {
    $candidate = `$candidates[1]`;
    $found = member (#thing = $variable, #nodeset = `$candidate//Simple-Term`);
    if [$found = "1"] {
       for-each [$found] {
         `count (preceding-sibling::*)`;
       }
    } else {
      item-containing-variable (#variable = $variable,
                                #candidates = `$candidates[position() > 1]`);
    }
  } else {
    $spelling = `$variable/@spelling`;
    $message = `concat ("We expected to find one (and only one) Item element that contains the variable ", $spelling, ", but none was found")`;
    die (#message = $message);
  }
}

tpl bound-in-block (#variable, #block) {
  $item_pos = position-of-item-containing-variable (#variable = $variable,
                                                    #candidates = `$block/Item`);
  $item = `$block/Item[$item_pos]`;
  if [$item] {
    for-each [$item] {
      bound-by-item-in-block (#variable = $variable,
                              #block = $block,
                              #items = `preceding-sibling::Item`);
    }
  } else {
    $spelling = `$variable/@spelling`;
    $block_line = `$block/@line`;
    $block_col = `$block/@col`;
    $message = `concat ("We expected to find an item containing the variable ", $spelling, " in the block starting at line ", $block_line, " and column ", $block_col, ", but we did not find such an item")`;
    die (#message = $message);
  }
}

tpl bound-in-blocks (#variable, #blocks) {
  if [$blocks] {
    $block = `$blocks[1]`;
    $bound = bound-in-block (#variable = $variable, #block = $block);
    if [$bound = "0"] {
      bound-in-blocks (#variable = $variable,
                       #blocks = `$blocks[position() > 1]`);
    } else {
      "1";
    }
  } else {
    "0";
  }
}

tpl block-bound (#variable) {
  bound-in-blocks (#variable = $variable, #blocks = `ancestor::Block`);
}

tpl [*] {
  apply [*];
}

tpl [Variable] {
  bound-by-quantifier (#variable = `.`);
  block-bound (#variable = `.`);
}

tpl [Simple-Term] {
  bound-by-quantifier (#variable = `.`);
  block-bound (#variable = `.`);
}