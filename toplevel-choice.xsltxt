stylesheet 1.0;

output method=xml indent="yes";

include die.xsl;
include tokens.xsl;

tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [*] (#target-idnr) mode="idnr-hunting" {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*] (#target-idnr = $target-idnr) mode="idnr-hunting";
  }
}

tpl [Simple-Term] (#target-idnr) mode="idnr-hunting" {
  $our-idnr = `@idnr`;
  if [$our-idnr = $target-idnr] {
    <it-Term {
      @induced = "induced";
    }
  } else {
    apply [.];
  }
}

tpl count-preceding-toplevel-items {
  `count (preceding::Item[parent::Text-Proper and not(@kind = "Reservation") and not(@kind = "Private-Functor-Definition") and not(@kind = "Private-Predicate-Definition")])`;
}

// Given a nodeset of propositions and a nodeset of
// explicitly/implicitly qualified segments, form the existential
// generalization of the conjunction of $propositions over those
// segments
tpl existentially-generalize (#variables, #starting-after, #idnr-to-it-term, #type, #propositions) {
  $starting-index = `$starting-after + 1`;
  $variable = `$variables[$starting-index]`;
  if [$variable] {
    <Existential-Quantifier-Formula {
      <Explicitly-Qualified-Segment {
        apply [$variable];
        apply [$type];
      }
      existentially-generalize (#variables = $variables,
                                #starting-after = $starting-index,
                                #idnr-to-it-term = $idnr-to-it-term,
                                #type = $type,
                                #propositions = $propositions);
    }
  } else {
    if [$propositions] {
      $proposition = `$propositions[1]`;
      $formula = `$proposition/*[position() = last()]`; // skip the label, if there is one
      if [$propositions[2]] {
        <Conjunctive-Formula {
          apply [$formula] (#target-idnr = $idnr-to-it-term) mode="idnr-hunting";
          existentially-generalize (#variables = $variables,
                                    #type = $type,
                                    #starting-after = $starting-after,
                                    #idnr-to-it-term = $idnr-to-it-term,
                                    #propositions = `$propositions[position() > 1]`);
        }
      } else {
        apply [$formula] (#target-idnr = $idnr-to-it-term) mode="idnr-hunting";
      }
    }
  }
}

tpl existentially-instantiate (#variables, #starting-after, #type, #propositions) {
  $starting-index = `$starting-after + 1`;
  $variable = `$variables[$starting-index]`;
  $variables-to-generalize = `$variables[position() >= $starting-after]`;
  <Explicitly-Qualified-Segment {
    for-each [$variables-to-generalize] {
      apply [.];
    }
    apply [$type];
  }
  apply [$propositions];
}

tpl conjoin-propositions (#propositions) {
  if [$propositions] {
    $proposition = `$propositions[1]`;
    $formula = `$proposition/*[position() = last()]`; // skip the label, if there is one
    if [$propositions[2]] {
      <Conjunctive-Formula {
        apply [$formula];
        conjoin-propositions (#propositions = `$propositions[position() > 1]`);
      }
    } else {
      apply [$formula];
    }
  }
}

key "spelling" [//*] `@spelling`;

tpl new-spelling-based-on (#base, #try) {
  $candidate = `concat ($base, $try)`;
  if [key ("spelling", $candidate)] {
    new-spelling-based-on (#base = $base,
                           #try = `$try + 1`);
  } else {
    $candidate;
  }
}

tpl new-dummy-mode-name {
  new-spelling-based-on (#base = "DummyMode", #try = "1");
}

tpl [Text-Proper/Item[@kind = "Choice-Statement"]] {

  if [not (Explicitly-Qualified-Segment | Implicitly-Qualified-Segment)] {
    die (#message = "We expect a Choice-Statement to have either an Explicitly-Qualified-Segment or an Implicitly-Qualified-Segment child, but this choice statement lacks both");
  }

  // treat first the case of one variable in a consider
  if [not(Explicitly-Qualified-Segment)] {
    die (#message = "We don't yet know how to deal with a choice statement that lacks an explicit type for the variables it introduces.");
  }
  if [Explicitly-Qualified-Segment[2]] {
    die (#message = "We don't know yet how to deal with toplevel choice statements that involve binding variables of different types");
  }

  $context = `.`;
  $num-previous = count-preceding-toplevel-items ();
  $justification = `$context/*[position() = last()]`;
  $type = `Explicitly-Qualified-Segment/*[position() = last()]`;
  $segment = `Explicitly-Qualified-Segment`;
  $num-variables = `count (Explicitly-Qualified-Segment/Variable)`;
  $variables = `$segment/Variable`;

  for-each [$variables] {

    if [not(@idnr)] {
      die (#message = "We encountered a Variable element that lacks an idnr attribute!");
    }
    if [not(@spelling)] {
      die (#message = "We encountered a Variable element that lacks a spelling attribute!");
    }

    $variable = `.`;
    $variable-idnr = `@idnr`;
    $variable-spelling = `@spelling`;
    $position = `position ()`;
    $earlier-variables = `$variables[position() < $position]`;

    // dummy mode
    $mode-name = new-spelling-based-on (#base = "DummyMode", #try = $position);
    <Item {
      @kind = "Definition-Item";
      @promoted = "choice-statement-mode";
      @spelling = $mode-name;
      @idnr = $variable-idnr;
      @variable-spelling = $variable-spelling;
      <Block {
        @kind = "Definitional-Block";
        for-each [$earlier-variables] {
          $earlier-variable-position = `position ()`;
          $earlier-mode-name = new-spelling-based-on (#base = "DummyMode", #try = $earlier-variable-position);
          <Item {
            @kind = "Constant-Definition";
            @idnr = `@idnr`;
            apply [.];
            <Global-Choice-Term {
              @induced = "global-choice-term";
              <Standard-Type {
                @spelling = $earlier-mode-name;
              }
            }
          }
        }
        <Item {
          @kind = "Mode-Definition";
          <Mode-Pattern {
            @spelling = $mode-name;
            <Loci;
          }
          <Standard-Mode {
            @kind = "Simple-Definiens";
            if [$type] {
              <Type-Specification {
                apply [$type];
              }
            }
            <Definiens {
              <Formula-Expression;
              existentially-generalize (#variables = $variables,
                                        #starting-after = $position,
                                        #idnr-to-it-term = $variable-idnr,
                                        #type = $type,
                                        #propositions = `$context/Proposition`);
            }
          }
        }
        <Item {
          @kind = "Correctness-Condition";
          <Existence;
          <Block {
            @kind = "Proof";
            <Item {
              @kind = "Choice-Statement";
              <Explicitly-Qualified-Segment {
                for-each [$variables[position() >= $position]] {
                  apply [.];
                }
                apply [$type];
              }
              apply [$context/Proposition];
              if [$position = 1] {
                apply [$justification];
              } else {
                <Straightforward-Justification {
                  <Definition-Reference {
                    $minus-three = `$num-previous + $position - 3`;
                    @spelling = `concat ("CKB", $minus-three)`;
                    @"number" = "1";
                  }
                }
              }
            }
            <Item {
              @kind = "Exemplification";
              apply [$variable];
            }
            <Item {
              @kind = "Conclusion";
              <Compact-Statement;
              <Proposition {
                <Thesis;
              }
              <Straightforward-Justification {
                for-each [$context/Proposition/Label] {
                  <Local-Reference {
                    for-each [@*] { copy-of `.`; }
                  }
                }
              }
            }
          }
        }
      }
    }

    // // constant definition

    // <Item {
    //   @kind = "Constant-Definition";
    //   @promoted = "choice-statement-functor";
    //   @spelling = $variable-spelling;
    //   apply [$variable];
    //   <Global-Choice-Term {
    //     apply [$type];
    //   }
    // }

  }

  // conjunction of the propositions
  <Item {
    @kind = "Theorem-Item";
    @promoted = "choice-statement-conditions";
    <Proposition {
      conjoin-propositions (#propositions = `Proposition`);
    }
    <Straightforward-Justification {
      $last-mode = `$num-previous + $num-variables - 1`;
      $last-functor = `$last-mode + 1`;
      <Definition-Reference {
        @spelling = `concat ("CKB", $last-mode)`;
        @"number" = "1";
      }
      // <Definition-Reference {
      //   @spelling = `concat ("CKB", $last-functor)`;
      //   @"number" = "1";
      // }
    }
  }

  if [Proposition[2]] {
    for-each [Proposition] {
      <Item {
        @kind = "Regular-Statement";
        @promoted = "choice-statement-condition";
        <Compact-Statement;
        apply [.];
        <Straightforward-Justification {
          $conjunction-position = `$num-previous + 2*$num-variables + 1`;
          <Theorem-Reference {
            @spelling = `concat ("CKB", $conjunction-position)`;
            @"number" = "1";
          }
        }
      }
    }
  }

}

// Dealing with toplevel choice statements

tpl [Block[@kind = "Proof"]] {
  $proof = `.`;
  $proof-free-variables = `@free-variables`;
  <Block {
    for-each [$proof/@*] { copy-of `.`; }
    for-each [preceding::Item[@kind = "Choice-Statement" and parent::Text-Proper]] {
      sort order="ascending";
      if [not(Explicitly-Qualified-Segment)] {
        die (#message = "Unable to deal with a Choice-Statement item that lacks an Explicitly-Qualified-Segment child");
      }
      for-each [Explicitly-Qualified-Segment/Variable] {
        $idnr = `@idnr`;
        $mode-name = `@spelling`;
        $variable-spelling = `@variable-spelling`;
        $token = `concat (",", $idnr, ",")`;
        if [contains ($proof-free-variables, $token)] {
          <Item {
            @kind = "Constant-Definition";
            <Variable {
              @idnr = $idnr;
              @spelling = $variable-spelling;
            }
            <Global-Choice-Term {
              <Standard-Type {
                @spelling = $mode-name;
              }
            }
          }
        }
      }
    }
    apply [$proof/*];
  }
}
