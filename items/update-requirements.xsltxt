stylesheet 1.0;
output method=xml indent="yes";

include tokens.xsl;
include die.xsl;

// Applied to a .evl file, reprint the .evl file with the requirements directive replaced by the contents
// content.  The stylesheet parameter
//
// #new-requirements
//
// express the intended new contents of the requirements directive.
// The purpose of this stylesheet is to fake the editing of the
// requirements directive of a .miz file without
// actually editing the .miz (a hairy prospect indeed).

// The value of the #new-requirements parameter is supposed to be a
// comma-delimited lists of article names, e.g.,
//
//  FOO1,BAR,BA5_4
//
// If HIDDEN is among the tokens of $new-requirements, it will appear
// twice in the output.

#new-requirements = { ""; }

tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

tpl [/] {
  apply [Environ];
}

tpl [Environ] {
  <Environ {
    for-each [@*] { copy-of `.`; }
    apply [Directive];
  }
}

tpl emit-identifiers (#identifier-token-string) {
  if [not($identifier-token-string = "")] {
    $first-identifier = first-item (#token-string = $identifier-token-string);
    $tail = token-string-tail (#token-string = $identifier-token-string);
    <Ident {
      @"name" = $first-identifier;
    }
    emit-identifiers (#identifier-token-string = $tail);
  }
}

tpl [Directive[@name = "Requirements"]] {
  if [$new-requirements = ""] {
    <Directive {
      @"name" = "Requirements";
      <Ident {
        @"name" = "HIDDEN";
      }
    }
  } else {
    <Directive {
      @"name" = "Requirements";
      if [not(contains $new-requirements, ",HIDDEN,")] {
        <Ident {
          @"name" = "HIDDEN";
        }
      }
      emit-identifiers (#identifier-token-string = $new-requirements);
    }
  }
}
