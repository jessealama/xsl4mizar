stylesheet "1.0";

output method="xml" indent="no";

//////////////////////////////////////////////////////////////////////
// Identifying a property
//////////////////////////////////////////////////////////////////////

// The property or condition to which the definition will be trimmed.
// Everything else will be dumped.
#target-condition-or-property = { ""; }

//////////////////////////////////////////////////////////////////////
// Utilities
//////////////////////////////////////////////////////////////////////

$lcletters = { "abcdefghijklmnopqrstuvwxyz"; }
$ucletters = { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; }

tpl lowercase (#string) { `translate($string, $ucletters, $lcletters)`; }
tpl uppercase (#string) { `translate($string, $lcletters, $ucletters)`; }

//////////////////////////////////////////////////////////////////////
// Document templates
//////////////////////////////////////////////////////////////////////

tpl [*] {
  $n = `name (.)`;
  <$n {
    for-each [@*] { copy-of `.`; }
    if [*] {
      "\n";
      for-each [*] {
        apply [.];
      }
    }
  }
  "\n";
}

tpl [*] mode="copy" {
  $n = `name (.)`;
  <$n {
    for-each [@*] { copy-of `.`; }
    if [*] {
      "\n";
      for-each [*] {
        apply [.] mode="copy";
      }
    }
  }
  "\n";
}

tpl [/] {

  // Sanity check to make sure that $target-condition-or-property has
  // a sensible value

  if [not($target-condition-or-property = "")] {
    // Explicitly enumerate the kinds of patterns/conditions we accept
    choose {

      //////////////////////////////////////////////////
      // Patterns
      //////////////////////////////////////////////////
      when [$target-condition-or-property = "kpattern"] {
        // OK
      }
      when [$target-condition-or-property = "rpattern"] {
        // OK
      }
      when [$target-condition-or-property = "vpattern"] {
        // OK
      }

      //////////////////////////////////////////////////
      // Constructors
      //////////////////////////////////////////////////
      when [$target-condition-or-property = "kconstructor"] {
        // OK
      }
      when [$target-condition-or-property = "rconstructor"] {
        // OK
      }
      when [$target-condition-or-property = "vconstructor"] {
        // OK
      }

      //////////////////////////////////////////////////
      // Conditions
      //////////////////////////////////////////////////
      when [$target-condition-or-property = "existence"] {
        // OK
      }
      when [$target-condition-or-property = "uniqueness"] {
        // OK
      }
      when [$target-condition-or-property = "coherence"] {
        // OK
      }
      when [$target-condition-or-property = "compatibility"] {
        // OK
      }
      when [$target-condition-or-property = "correctness"] {
        // OK
      }

      //////////////////////////////////////////////////
      // Definitional theorems/definientia
      //////////////////////////////////////////////////
      when [$target-condition-or-property = "deftheorem"] {
        // OK
      }
      when [$target-condition-or-property = "rdefiniens"] {
        // OK
      }
      when [$target-condition-or-property = "vdefiniens"] {
        // OK
      }
      when [$target-condition-or-property = "kdefiniens"] {
        // OK
      }

      //////////////////////////////////////////////////
      // Constructor properties
      //////////////////////////////////////////////////

      ////////////////////////////////////////
      // Function properties
      ////////////////////////////////////////
      when [$target-condition-or-property = "commutativity"] {
        // OK
      }
      when [$target-condition-or-property = "idempotence"] {
        // OK
      }
      when [$target-condition-or-property = "involutiveness"] {
        // OK
      }
      when [$target-condition-or-property = "projectivity"] {
        // OK
      }


      ////////////////////////////////////////
      // Relation properties
      ////////////////////////////////////////
      when [$target-condition-or-property = "symmetry"] {
        // OK
      }
      when [$target-condition-or-property = "asymmetry"] {
        // OK
      }
      when [$target-condition-or-property = "connectedness"] {
        // OK
      }
      when [$target-condition-or-property = "reflexivity"] {
        // OK
      }
      when [$target-condition-or-property = "irreflexivity"] {
        // OK
      }

      ////////////////////////////////////////
      // 'strict'
      ////////////////////////////////////////
      when [$target-condition-or-property = "abstractness"] {
        // OK
      }

      otherwise {
        $message = `concat ("Error: the string '", $target-condition-or-property, "' is not an acceptable value for the target-condition-or-property stylesheet parameter.")`;
        msg terminate="yes" $message;
      }
    }
  }

  if [Article] {
    apply [Article];
  } else {
    msg terminate="yes" "Error: the required Article document element is missing.";
  }
}

tpl [Article] {
  $num-definition-blocks = `count (DefinitionBlock)`;
  if [$num-definition-blocks > 1] {
    msg terminate="yes" "Error: this stylesheet assumes that we are working with an article that has at most on definition block.";
  } else {
    <Article {
      @aid = `@aid`;
      "\n";
      apply [*];
    }
  }
}

tpl [DefTheorem] {
  if [$target-condition-or-property = "deftheorem"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Definiens] {
  if [$target-condition-or-property = "rdefiniens"
      or $target-condition-or-property = "kdefiniens"
      or $target-condition-or-property = "vdefiniens"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [DefinitionBlock] {
  <DefinitionBlock {
    for-each [@*] { copy-of `.`; }
    "\n";
    apply [*];
  }
  "\n";
}

tpl [Pattern[not(@kind)]] {
  msg terminate="yes" "Error: we found a Pattern element that lacks a kind attribute!";
}

tpl [Pattern[@kind]] {
  $kind = lowercase (#string = `@kind`);
  $match = `concat ($kind, "pattern")`;
  if [$match = $target-condition-or-property] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Constructor] {
  if [$target-condition-or-property = "kconstructor"
      or $target-condition-or-property = "rconstructor"
      or $target-condition-or-property = "vconstructor"
      or $target-condition-or-property = "kdefiniens"
      or $target-condition-or-property = "rdefiniens"
      or $target-condition-or-property = "vdefiniens"
      or $target-condition-or-property = "deftheorem"
      or $target-condition-or-property = "abstractness"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Existence] {
  if [$target-condition-or-property = "existence"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Abstractness] {
  if [$target-condition-or-property = "abstractness"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Uniqueness] {
  if [$target-condition-or-property = "uniqueness"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Coherence] {
  if [$target-condition-or-property = "coherence"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Correctness] {
  if [$target-condition-or-property = "correctness"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Compatibility] {
  if [$target-condition-or-property = "compatibility"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [JustifiedProperty] {
  $prop-name = `name(*[1])`;
  $prop-name-lc = lowercase (#string = $prop-name);
  if [$prop-name-lc = $target-condition-or-property] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}

tpl [Registration] {
  if [$target-condition-or-property = "abstractness"] {
    apply [.] mode="copy";
  } else {
    // dump
  }
}