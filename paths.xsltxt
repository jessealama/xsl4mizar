stylesheet 1.0;

output method=xml;

include die.xsl;
include tokens.xsl;

key "binder" [Item[@kind = "Loci-Declaration"] | /Text-Proper/Item[@kind = "Reservation" or @kind = "Private-Predicate-Definition" or (@kind="Regular-Statement" and child::Diffuse-Statement)]] `@toplevel-binder-number`;

// Determine whether there is a path from the variable bound by
// $reservation to $context (i.e., whether the variable occurs
// anywhere inside $context).  $later-reservations is a node set of
// reservation items that we may need to consult.  $already-handled is
// a token list of idnr's of variables that we have already dealt
// with.
//
// There is no path when the variable bound by $reservation occurs in
// $later-reservations (because the variable will be rebound later).
// If this condition fails, there is a path provided either:
//
// * the variable bound by $reservation occurs freely in $context, or
//
// * the variable bound by $reservation occurs in an implicitly
//   qualified segment in $context, or
//
// * the variable bound by $reservation occurs as a simple term in
//   some reservation R in $later-reservations, and there is a path
//   from R to the context.  (This is where recursive path search
//   enters.)

tpl exists-path-from-some-toplevel-item-to-context (#items, #context, #later-items) {
  if [$items = ""] {
    "0";
  } else {
    $item-number-token = first-token (#token-string = $items);
    $item-number = value-of-token (#token = $item-number-token);
    $item = `key ("binder", $item-number)`;
    $exists-path = exists-path-from-toplevel-item-to-context (#item = $item,
                                                              #context = $context,
                                                              #later-toplevel-items = $later-items);
    if [$exists-path = "0"] {
      $items-tail = token-string-tail (#token-string = $items);
      exists-path-from-some-toplevel-item-to-context (#items = $items-tail,
                                                      #context = $context,
                                                      #later-items = $later-items);
    } else {
      "1";
    }
  }
}

// Is the reservation-number attribute of $reservation bigger than the
// reservation-number attribute of every reservation in $reservations?
tpl item-follows-every-item (#item-number, #items) {
  if [$items = ""] {
    "1";
  } else {
    $potential-spoiler-token = first-token (#token-string = $items);
    $potential-spoiler-number = value-of-token (#token = $potential-spoiler-token);
    if [$potential-spoiler-number < $item-number] {
      $items-tail = token-string-tail (#token-string = $items);
      item-follows-every-item (#item-number = $item-number,
                               #items = $items-tail);
    } else {
      "0";
    }
  }
}

// See the documentation for items-following-every
tpl items-following-every-helper (#items, #all-items, #val) {
  if [$all-items = ""] {
    $val;
  } else {
    if [$items = ""] {
      $all-items;
    } else {
      $item-token = first-token (#token-string = $all-items);
      $item = value-of-token (#token = $item-token);
      $items-tail = token-string-tail (#token-string = $all-items);
      $bigger = item-follows-every-item (#item-number = $item,
                                         #items = $items);
      if [$bigger = "0"] {
        items-following-every-helper (#items = $items,
                                      #all-items = $items-tail);
      } else {
        $new-value = append-token-strings (#token-string-a = $val,
                                           #token-string-b = $item-token);
        items-following-every-helper (#items = $items,
                                      #all-items = $items-tail,
                                      #val = $new-value);
      }
    }
  }
}

// Return the subset of $all-items (given as a token string consisting
// of the values of the toplevel-binder-number attribute) consisting
// of those items whose toplevel-binder-number attribute is greater
// than that of every item in $items.  The value is again a token
// string.
tpl items-following-every (#items, #all-items) {
  items-following-every-helper (#items = $items,
                                #all-items = $all-items,
                                #val = "");
}


tpl toplevel-items-in-which-item-occurs (#idnr, #items, #val) {
  if [$items = ""] {
    $val;
  } else {
    $idnr-token = `concat (",", $idnr, ",")`;
    $first-toplevel-item-number-token = first-token (#token-string = $items);
    $first-toplevel-item-number = value-of-token (#token = $first-toplevel-item-number-token);
    $first-toplevel-item = `key ("binder", $first-toplevel-item-number)`;
    $remaining-items = token-string-tail (#token-string = $items);
    $new-val = append-token-strings (#token-string-a = $val,
                                     #token-string-b = $first-toplevel-item-number-token);
    if [$first-toplevel-item] {
      $first-toplevel-item-free-variables = `$first-toplevel-item/@free-variables`;
      choose {
        when [contains ($first-toplevel-item-free-variables, $idnr-token)] {
          toplevel-items-in-which-item-occurs (#idnr = $idnr,
                                               #items = $remaining-items,
                                               #val = $new-val);
        }
        when [$first-toplevel-item//Implicitly-Qualified-Segment/Variable[@idnr = $idnr]] {
          toplevel-items-in-which-item-occurs (#idnr = $idnr,
                                               #items = $remaining-items,
                                               #val = $new-val);
        }
        when [$first-toplevel-item//Simple-Term[@idnr = $idnr]] {
          toplevel-items-in-which-item-occurs (#idnr = $idnr,
                                               #items = $remaining-items,
                                               #val = $new-val);
        }
        otherwise {
          // go hunting for the appearance of $idnr as an argument of a dependent type
          if [$first-toplevel-item//Implicitly-Qualified-Segment] {
            $variable = `$first-toplevel-item//Implicitly-Qualified-Segment/Variable[1]`; // should I worry about multiple variables?
            $variable-idnr = `$variable/@idnr`;
            $type = `preceding::Item[@kind = "Reservation"]/Variable[@idnr = $variable-idnr]/../*[position() = last()]`;
            if [$type//Simple-Term[@idnr = $idnr]] {
              toplevel-items-in-which-item-occurs (#idnr = $idnr,
                                                   #items = $remaining-items,
                                                   #val = $new-val);
            } else {
              toplevel-items-in-which-item-occurs (#idnr = $idnr,
                                                   #items = $remaining-items,
                                                   #val = $val);
            }
          } else {
            toplevel-items-in-which-item-occurs (#idnr = $idnr,
                                                 #items = $remaining-items,
                                                 #val = $val);
          }
        }
      }
    } else {
      $message = `concat ("We tried to look up the toplevel item whose idnr is ", $first-toplevel-item-number, " (the first element of the token list '", $items, "' of item idnr numbers) but there is no such item")`;
      die (#message = $message);
    }
  }
}

// $reservations is a list of reservation numbers
tpl item-bound-by-some-toplevel-item (#item, #items) {
  if [$item/@idnr] {
    $idnr = `$item/@idnr`;
    if [$items = ""] {
      "0";
    } else {
      $first-toplevel-item-number-token = first-token (#token-string = $items);
      $first-toplevel-item-number = value-of-token (#token = $first-toplevel-item-number-token);
      $first-item = `key ("binder", $first-toplevel-item-number)`;
      if [$first-item/@idnr = $idnr] {
        "1";
      } else {
        $remaining-items = token-string-tail (#token-string = $items);
        item-bound-by-some-toplevel-item (#item = $item,
                                          #items = $remaining-items);
      }
    }
  } else {
    $item-line = `$item/@line`;
    $item-col = `$item/@col`;
    $message = `concat ("Don't know how to determine whether the item on line ", $item-line, " and column ", $item-col, " is bound by some other items, because it lacks an idnr attribute.")`;
    die (#message = $message);
  }
}

tpl items-using-toplevel-diffuse-reasoning-item-helper (#diffuse-reasoning-item, #items, #val) {
  $idnr = `$diffuse-reasoning-item/@idnr`;
  if [$items = ""] {
    $val;
  } else {
    $items-tail = token-string-tail (#token-string = $items);
    $first-item-number-token = first-token (#token-string = $items);
    $first-item-number = value-of-token (#token = $first-item-number-token);
    $item = `key ("binder", $first-item-number)`;
    if [$item] {
      if [$item//Local-Reference[@idnr = $idnr]] {
        $new-val = append-token-strings (#token-string-a = $val,
                                         #token-string-b = $first-item-number-token);
        items-using-toplevel-diffuse-reasoning-item-helper (#diffuse-reasoning-item = $diffuse-reasoning-item,
                                                            #items = $items-tail,
                                                            #val = $new-val);
      } else {
        items-using-toplevel-diffuse-reasoning-item-helper (#diffuse-reasoning-item = $diffuse-reasoning-item,
                                                            #items = $items-tail,
                                                            #val = $val);
      }
    } else {
      $message = `concat ("We were unable to find a toplevel item with the idnr attribute ", $first-item-number, "; why not?")`;
      die (#message = $message);
    }
  }
}

// Given a token list $items of toplevel-binder-numbers and a
// $diffuse-reasoning-item, return the sub-token list of $items that
// use $diffuse-reasoning-item in their justification
tpl items-using-toplevel-diffuse-reasoning-item (#diffuse-reasoning-item, #items) {
  if [$diffuse-reasoning-item/Label] {
    if [$diffuse-reasoning-item/@idnr] {
      items-using-toplevel-diffuse-reasoning-item-helper (#diffuse-reasoning-item = $diffuse-reasoning-item,
                                                          #items = $items,
                                                          #val = "");
    } else {
      if [$diffuse-reasoning-item/Label/@spelling] {
        $spelling = `$diffuse-reasoning-item/Label/@spelling`;
        $message = `concat ("The toplevel diffuse reasoning item with label ", $spelling, " lacks an idnr attribute!")`;
        die (#message = $message);
      } else {
        die (#message = "We found a toplevel diffuse reasoning item that lacks an idnr attribute!");
      }
    }
  } else { // the item lacks a label, so nothing can refer to it
    "";
  }
}

tpl exists-path-from-toplevel-item-to-context (#item, #context, #later-toplevel-items) {
  $idnr = `$item/@idnr`;
  $kind = `$item/@kind`;
  if [$kind = "Regular-Statement"] {
    $later-users = items-using-toplevel-diffuse-reasoning-item (#diffuse-reasoning-item = $item,
                                                               #items = $later-toplevel-items);
    if [$later-users = ""] { // this toplevel item is not needed to justify any of the later items, so look inside $context
      if [$context//Local-Reference[@idnr = $idnr]] {
        "1";
      } else {
        "0";
      }
    } else {
      $items-after-later-users = items-following-every (#items = $later-users,
                                                        #all-items = $later-toplevel-items);
      exists-path-from-some-toplevel-item-to-context (#items = $later-users,
                                                      #context = $context,
                                                      #later-items = $items-after-later-users);
    }
  } else {
    $bound-later = item-bound-by-some-toplevel-item (#item = $item, #items = $later-toplevel-items);
    if [$bound-later = "1"] {
      "0";
    } else {
      $token = `concat (",", $idnr, ",")`;
      $free-variables-of-context = `$context/@free-variables`;
      if [contains ($free-variables-of-context, $token)] {
        "1";
      } else {
        if [$context//Implicitly-Qualified-Segment/Variable[@idnr = $idnr]] {
          "1";
        } else {
          if [$kind = "Loci-Declaration" and ($context//Locus[@nr = $idnr] or $context//Simple-Term[@idnr = $idnr])] {
            "1";
          } else {
            if [$kind = "Private-Predicate-Definition" and $context//Private-Predicate-Formula[@idnr = $idnr]] {
              "1";
            } else {
              $later-users = toplevel-items-in-which-item-occurs (#idnr = $idnr,
                                                                  #items = $later-toplevel-items);
              $items-after-candidates = items-following-every (#items = $later-users,
                                                               #all-items = $later-toplevel-items);
              exists-path-from-some-toplevel-item-to-context (#items = $later-users,
                                                              #context = $context,
                                                              #later-items = $items-after-candidates);
            }
          }
        }
      }
    }
  }
}

tpl toplevel-item-node-set-to-token-string (#items) {
  if [$items] {
    $item = `$items[1]`;
    if [$item/@toplevel-binder-number] {
      $toplevel-item-number = `$item/@toplevel-binder-number`;
      $token = `concat (",", $toplevel-item-number, ",")`;
      $tail-token-string = toplevel-item-node-set-to-token-string (#items = `$items[position() > 1]`);
      append-token-strings (#token-string-a = $token,
                            #token-string-b = $tail-token-string);
    } else {
      $item-line = `$item/@line`;
      $item-col = `$item/@col`;
      $message = `concat ("We found a toplevel binding item at line ", $item-line, " and column ", $item-col, " that lacks a toplevel-binder-number attribute!")`;
      die (#message = $message);
    }
  } else {
    "";
  }
}

tpl index-of-item-with-minimal-number (#items) {
  if [$items] {
    if [$items[2]] {
      $item = `$items[1]`;
      $item-number = `$item/@toplevel-binder-number`;
      $index-for-tail = index-of-item-with-minimal-number (#items = `$items[position() > 1]`);
      $adjusted-index = `$index-for-tail + 1`;
      $best-in-tail = `$items[$adjusted-index]`;
      $best-in-tail-item-number = `$best-in-tail/@toplevel-binder-number`;
      if [$item-number < $best-in-tail-item-number] {
        "1";
      } else {
        $adjusted-index;
      }
    } else {
      "1";
    }
  } else {
    die (#message = "We cannot compute the index of something in an empty node set!");
  }
}
