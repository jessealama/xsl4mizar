stylesheet "1.0";

output method="xml" encoding="utf-8";
output doctype-public="-//W3C//DTD XHTML 1.1//EN";
output doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd";
output omit-xml-declaration="no";

include utils/die.xsl;

tpl list (#separ, #elems) {
 for-each [$elems] {
  apply[.]; if [not(position()=last())] { copy-of $separ; } }
}

$lcletters= { "abcdefghijklmnopqrstuvwxyz"; }
$ucletters= { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; }

tpl uppercase (#string) { `translate($string, $lcletters, $ucletters)`; }

tpl [/] {
  apply [tstp];
}

tpl [tstp] {
  <html {
    @"xmlns" = "http://www.w3.org/1999/xhtml";
    @xml:lang="en";
    <head {
      <title {
        "hey there";
      }
      <link {
        @rel = "stylesheet";
        @type = "text/css";
        @href = "tstp.css";
      }
    }
    <body {
      <table {
        @class = "tstp-problem";
        @rules = "all";
        if [comment] {
          @summary = `comment[1]/text()`;
          <caption {
            @class = "tstp-problem-caption";
            apply [comment[1]];
          }
        }
        <colgroup {
          <col;
          <col;
          <col;
          <col;
          <col;
        }
        <thead {
          <tr {
            <th { "Name"; }
            <th { "Status"; }
            <th { "Formula"; }
            <th { "Source"; }
            <th { "Info"; }
          }
        }
        <tbody {
          apply [formula[child::source/non-logical-data[@name = "file"]]];
        }
        <tobdy {
          apply [formula[not(child::source/non-logical-data[@name = "file"])]];
        }
      }
    }
  }
}

tpl [comment] {
  `.`;
}

key "formulas" [/tstp/formula[@name]] `@name`;
key "symbols" [/tstp/formula/source[descendant::non-logical-data[@name = "new_symbol"]]] `descendant::non-logical-data[@name = "new_symbol"]/non-logical-data/@name`;

tpl [formula[not(@name)]] {
  die (#message = "We require that a formula element have a name attribute!");
}

tpl [formula[not(@status)]] {
  die (#message = "We require that a formula element have a status attribute!");
}

tpl [defined-predicate[not(@name)]] {
  die (#message = "We require that a defined-predicate element have a name attribute!");
}

tpl [defined-predicate[@name = "true"]] {
  "&#8868;";
}

tpl [defined-predicate[@name and not(@name = "true")]] {
  $n = `@name`;
  $message = `concat ("We don't know how to deal with a defined predicate whose name is not 'true' (the name is '", $n, "'")`;
  die (#message = $message);
}

tpl [formula[@name]] {
  <tr {
    <td {
      @"id" = `@name`;
      @class = "formula-name";
      `@name`;
     }
     <td {
       @class = "status";
       `@status`;
     }
     <td {
      @class = "formula";
      apply [*[1]];
    }
    <td {
      @class = "source";
      apply [source];
    }
    <td {
      @class = "useful-info";
      apply [useful-info];
    }
  }
}

// variables

tpl [variable[not(@name)]] {
  die (#message = "We require that variables have a name attribute!");
}

tpl [variable[@name]] {
  <span {
    @class = "variable";
    `@name`;
  }
}

// formula shapes

tpl [predicate[not(@name)]] {
  die (#message = "We require that a variable have a name attribute!");
}

tpl [predicate[@name = "=" and not(child::*[2])]] {
  die (#message = "We require that an equality predicate element have at least two children!");
}

tpl [predicate[@name = "=" and child::*[3]]] {
  die (#message = "We require that an equality predicate element have fewer than three children!");
}

tpl [predicate[@name = "="]] {
  "(";
  apply [*[1]];
  <span {
    @class = "predicate";
    " = ";
  }
  apply [*[2]];
  ")";
}

tpl [predicate[@name and not(@name = "=")]] {
  $n = `@name`;
  $constructor = `substring-before ($n, "_")`;
  $article = `substring-after ($n, "_")`;
  <span {
    @class = "predicate";
    <span {
      @class = "constructor";
      `$constructor`;
    }
    <sub {
      <span {
        @class = "article";
        `$article`;
      }
    }
  }
  "(";
  list (#separ = ", ", #elems = `*`);
  ")";
}

tpl [function[not(@name)]] {
  die (#message = "We require that a function have a name attribute!");
}

tpl [function[@name]] {
  $n = `@name`;
  $constructor = `substring-before ($n, "_")`;
  $article = `substring-after ($n, "_")`;
  <span {
    @class = "function";
    <span {
      @class = "constructor";
      `$constructor`;
     }
    <sub {
      <span {
        @class = "article";
        `$article`;
      }
    }
  }
  if [*] {
    "("; list (#separ = ", ", #elems = `*`); ")";
  }
}

tpl [*[not(child::*[2])]] mode="binary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent binary connectives, but we have found such an element that lacks two children")`;
  die (#message = $message);
}

tpl [*[child::*[3]]] mode="binary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent binary connectives, but we have found such an element that has more than two children")`;
  die (#message = $message);
}

tpl [*] (#connective) mode="binary-connective" {
  "("; apply [*[1]]; `$connective`; apply [*[2]]; ")";
}

tpl [implication] {
  apply [.] (#connective = "&#8594;") mode="binary-connective";
}

tpl [equivalence] {
  apply [.] (#connective = "&#8596;") mode="binary-connective";
}

// unary connectives

tpl [*[not(child::*)]] mode="unary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent unary connectives, but we have found such an element that lacks a child!")`;
  die (#message = $message);
}

tpl [*[child::*[3]]] mode="unary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent unary connectives, but we have found such an element that has more than one child")`;
  die (#message = $message);
}

tpl [*] (#connective) mode="unary-connective" {
  copy-of $connective; apply [*[1]];
}

tpl [negation] {
  apply [.] (#connective = "&#172;") mode="unary-connective";
}

// quantifiers

tpl [quantifier[not(@type)]] {
  die (#message = "Quantifiers must have a type attribute, but we found one that lacks this attribute!");
}

tpl [quantifier[@type and not(@type = "universal" or @type = "existential")]] {
  die (#message = "We assume that quantifiers are either universal or existential!");
}

tpl [quantifer[not(child::variable)]] {
  die (#message = "We require that quantifiers have at least one variable child!");
}

tpl [quantifier[not(child::*[2])]] {
  die (#message = "We require that quantifiers have at least two child elements!");
}

tpl [quantifier[@type = "universal" or @type = "existential"]] {
  $type = `@type`;
  if [$type = "universal"] {
    "&#8704;";
  } else {
    "&#8707;";
  }
  list (#elems = `variable`,
        #separ = ", ");
  "["; apply [*[position() = last()]]; "]";
}

// sources

tpl [source[not(child::non-logical-data[@name = "file"])]] {
  <div {
    @class = "source";
    apply [*];
  }
}

tpl [source[child::non-logical-data[@name = "file" and not(child::non-logical-data[2])]]] {
  die (#message = "We require that non-logical-data elements whose name is 'file' have at least two non-logical-data child elements!");
}

tpl [source[child::non-logical-data[@name = "file" and child::non-logical-data[not(@name)]]]] {
  die (#message = "We require that non-logical-data elements whose name is 'file' have non-logical-data child elements that have a name attribute!");
}

tpl [source[child::non-logical-data[@name = "file"]]] {
  $article = `non-logical-data[@name = "file"]/non-logical-data[1]/@name`;
  $fully-qualified-constructor = `non-logical-data[@name = "file"]/non-logical-data[2]/@name`;
  $constructor-kind = `substring ($fully-qualified-constructor, 1, 1)`;
  $constructor-kind-uc = uppercase (#string = $constructor-kind);
  $after-constructor-kind = `substring-after ($fully-qualified-constructor, $constructor-kind)`;
  $constructor-number = `substring-before ($after-constructor-kind, "_")`;
  <a {
    @href = `concat ("http://mizar.org/version/current/html/", $article, ".html#", $constructor-kind-uc, $constructor-number)`;
   `concat ($constructor-kind, $constructor-number)`; " of ";
   <span {
    @class = "article";
    `$article`;
    }
  }
}

tpl [non-logical-data[not(@name)]] {
  "["; list (#elems = `*`, #separ = ","); "]";
}

tpl [non-logical-data[@name and not(@name = "assumptions")]] {
  "["; `@name`; list (#elems = `*`, #separ = ","); "]";
}

tpl [non-logical-data[@name = "assumptions"]] {
  "[";
  for-each [non-logical-data/non-logical-data] {
    apply [.] mode="link";
    if [not(position() = last())] {
      ",";
    }
  }
  "]";
}

tpl [non-logical-data[not(@name)]] mode="link" {
  die (#message = "We cannot link a non-logical-data element that lacks a name attribute!");
}

tpl [non-logical-data[@name]] mode="link" {
  $n = `@name`;
  <a {
    @href = `concat ("#", $n)`;
    `$n`;
  }
}

tpl [useful-info] {
  <div {
    @class = "useful-info";
    apply [*];
  }
}

tpl [number[not(@name)]] {
  die (#message = "We require that numbe elements have a name attribute!");
}

tpl [number[@name]] {
  `@name`;
}