// tptp-xml-to-prolog.xsltxt : Transform an XML representation of a TPTP problem into the conventional prolog syntax

stylesheet "1.0";

output method="text" encoding="utf-8" indent="yes";

include ../utils/die.xsl;

tpl list (#separ, #elems) {
 for-each [$elems] {
  apply[.]; if [not(position()=last())] { copy-of $separ; } }
}

// Do nothing by default
tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

//////////////////////////////////////////////////////////////////////
// Sanity checks as templates
//////////////////////////////////////////////////////////////////////

tpl [formula[not(@name)]] mode="sanity-check" {
  die (#message = "We requre that formula elements have names");
}

tpl [formula[not(@status)]] mode="sanity-check" {
  die (#message = "We requre that formula elements have a status!");
}

tpl [formula[not(@syntax)]] {
  die (#message = "We require that every formula have a syntax attribute!");
}

tpl [formula[@syntax and not(@syntax = "formula")]] {
  $syntax = `@syntax`;
  $message = `concat ("We are unable to deal with formulas whose syntax attribute is '", $syntax, "'")`;
  die (#message = $message);
}

tpl [variable[not(@name)]] mode="sanity-check" {
  die (#message = "We require that variables have a name attribute!");
}

tpl [defined-predicate[not(@name)]] mode="sanity-check" {
  die (#message = "We require that a defined-predicate element have a name attribute!");
}

tpl [defined-predicate[@name and not(@name = "true") and not(@name = "false")]] mode="sanity-check" {
  $n = `@name`;
  $message = `concat ("We don't know how to deal with a defined predicate whose name is not 'true' (the name is '", $n, "'")`;
  die (#message = $message);
}

tpl [predicate[not(@name)]] mode="sanity-check" {
  die (#message = "We require that a variable have a name attribute!");
}

tpl [function[not(@name)]] mode="sanity-check" {
  die (#message = "We require that a function have a name attribute!");
}

tpl [quantifier[not(@type)]] mode="sanity-check" {
  die (#message = "Quantifiers must have a type attribute, but we found one that lacks this attribute!");
}

tpl [quantifier[@type and not(@type = "universal" or @type = "existential")]] mode="sanity-check" {
  die (#message = "We assume that quantifiers are either universal or existential!");
}

tpl [quantifer[not(child::variable)]] mode="sanity-check" {
  die (#message = "We require that quantifiers have at least one variable child!");
}

tpl [quantifier[not(child::*[2])]] mode="sanity-check" {
  die (#message = "We require that quantifiers have at least two child elements!");
}

tpl [/] mode="sanity-check" {
  apply [descendant::formula] mode="sanity-check";
  apply [descendant::variable] mode="sanity-check";
  apply [descendant::predicate] mode="sanity-check";
  apply [descendant::defined-predicate] mode="sanity-check";
}

tpl [/] {
  if [not(tstp)] {
    die (#message = "The required tstp element is missing!");
  }
  apply [.] mode="sanity-check";
  apply [*];
}

tpl [tstp] {
  if [not(formula)] {
    die (#message = "We require that a tstp element have at least one formula child element!");
  }
  list (#separ = "\n", #elems = `formula`);
}

tpl [formula[@name and @status and @syntax = "formula"]] {
  // We will emit only the name, status, and content of the formula.
  // Source and useful-info fields, if present, will be ignored.
  "fof("; `@name`; ","; `@status`; ","; apply [*[1]]; ").";
}

// variables

tpl [variable[@name]] {
  `@name`;
}

// formula shapes

tpl [predicate[@name = "=" and not(child::*[2])]] {
  die (#message = "We require that an equality predicate element have at least two children!");
}

tpl [predicate[@name = "=" and child::*[3]]] {
  die (#message = "We require that an equality predicate element have fewer than three children!");
}

tpl [predicate[@name = "="]] {
  "("; apply [*[1]]; " = "; apply [*[2]]; ")";
}

tpl [predicate[@name and not(@name = "=") and not(*)]] {
  `@name`;
}

tpl [predicate[@name and not(@name = "=") and *]] {
  `@name`; "("; list (#separ = ", ", #elems = `*`); ")";
}

tpl [function[@name and not(*)]] {
  `@name`;
}

tpl [function[@name and *]] {
  `@name`; "("; list (#separ = ", ", #elems = `*`); ")";
}

tpl [*[not(child::*[2])]] mode="binary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent binary connectives, but we have found such an element that lacks two children")`;
  die (#message = $message);
}

tpl [*[child::*[3]]] mode="binary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent binary connectives, but we have found such an element that has more than two children")`;
  die (#message = $message);
}

tpl [*] (#connective) mode="binary-connective" {
  "("; apply [*[1]]; " "; `$connective`; " "; apply [*[2]]; ")";
}

tpl [implication] {
  apply [.] (#connective = "=>") mode="binary-connective";
}

tpl [equivalence] {
  apply [.] (#connective = "<=>") mode="binary-connective";
}

tpl [disjunction] {
  apply [.] (#connective = "|") mode="binary-connective";
}

tpl [conjunction] {
  apply [.] (#connective = "&") mode="binary-connective";
}

// unary connectives

tpl [*[not(child::*)]] mode="unary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent unary connectives, but we have found such an element that lacks a child!")`;
  die (#message = $message);
}

tpl [*[child::*[3]]] mode="unary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent unary connectives, but we have found such an element that has more than one child")`;
  die (#message = $message);
}

tpl [*] (#connective) mode="unary-connective" {
  `$connective`; " "; apply [*[1]];
}

tpl [negation] {
  apply [.] (#connective = "~") mode="unary-connective";
}

// quantifiers

tpl [quantifier[@type = "universal"]] {
 "( ! ["; list (#separ = ",", #elems = `variable`); "] : "; apply [*[position() = last()]]; ")";
}

tpl [quantifier[@type = "existential"]] {
 "( ? ["; list (#separ = ",", #elems = `variable`); "] : "; apply [*[position() = last()]]; ")";
}

// defined predicates

tpl [defined-predicate[@name = "true"]] {
  "$true";
}

tpl [defined-predicate[@name = "false"]] {
  "$false";
}
