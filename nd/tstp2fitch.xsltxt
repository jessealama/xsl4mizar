stylesheet "1.0";

output method="xml" encoding="utf-8" indent="yes";
output doctype-public="-//W3C//DTD XHTML 1.1//EN";
output doctype-system="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd";
output omit-xml-declaration="no";

key "formulas" [/tstp/formula[@name]] `@name`;
key "symbols" [/tstp/formula/source[descendant::non-logical-data[@name = "new_symbol"]]] `descendant::non-logical-data[@name = "new_symbol"]/non-logical-data/@name`;

tpl list (#separ, #elems) {
 for-each [$elems] {
  apply[.]; if [not(position()=last())] { copy-of $separ; } }
}

$lcletters= { "abcdefghijklmnopqrstuvwxyz"; }
$ucletters= { "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; }

tpl uppercase (#string) { `translate($string, $lcletters, $ucletters)`; }

tpl [/] {
  if [not(tstp)] {
    msg terminate="yes" "The required tstp element is missing!";
  }
  apply [tstp];
}

tpl [tstp] {
  <html {
    @"xmlns" = "http://www.w3.org/1999/xhtml";
    @xml:lang = "en";
    @"lang" = "en";
    <head {
      <meta {
        @http-equiv = "content-type";
        @content = "text/html; charset=UTF-8";
      }
      <title {
        "hey there";
      }
      <link {
        @rel = "stylesheet";
        @type = "text/css";
        @href = "tstp.css";
      }
    }
    <body {
      apply [formula[position() = last()]];
    }
  }
}

tpl [comment] {
  // ignore
}

tpl [formula[source/non-logical-data[@name = "inference" and non-logical-data[@name = "let"]]]] {
  $context = `.`;
  $formula = `*[1]`;
  for-each [source/non-logical-data[@name = "inference" and non-logical-data[@name = "let"]]/non-logical-data[position() = last()]] {
    for-each [non-logical-data[@name]] {
      $n = `@name`;
      if [starts-with($n, "i")] {
        <table {
          <thead {
            <tr {
              <th { "New variable"; }
            }
          }
          <tbody {
            $earlier = `key ("formulas", $n)`;
            if [not($earlier)] {
              msg terminate="yes" "We failed to look up a formula!";
            }
            <tr {
              <td {
                apply [$earlier];
              }
            }
            <tr {
              <td {
                @class = "conclusion";
                apply [$formula];
              }
            }
          }
        }
      }
    }
  }
}

tpl [formula[source/non-logical-data[@name = "inference" and non-logical-data[@name = "discharge_asm"]]]] {

}

tpl [formula[not(@name)]] {
  msg terminate="yes" "We require that a formula element have a name attribute!";
}

tpl [formula[not(@status)]] {
  msg terminate="yes" "We require that a formula element have a status attribute!";
}

tpl [defined-predicate[not(@name)]] {
  msg terminate="yes" "We require that a defined-predicate element have a name attribute!";
}

tpl [defined-predicate[@name = "true"]] {
  "&#8868;";
}

tpl [defined-predicate[@name and not(@name = "true")]] {
  $n = `@name`;
  $message = `concat ("We don't know how to deal with a defined predicate whose name is not 'true' (the name is '", $n, "'")`;
  msg terminate="yes" `$message`;
}

// variables

tpl [variable[not(@name)]] {
  msg terminate="yes" "We require that variables have a name attribute!";
}

tpl [variable[@name]] {
  <span {
    @class = "variable";
    `@name`;
  }
}

// formula shapes

tpl [predicate[not(@name)]] {
  msg terminate="yes" "We require that a variable have a name attribute!";
}

tpl [predicate[@name = "=" and not(child::*[2])]] {
  msg terminate="yes" "We require that an equality predicate element have at least two children!";
}

tpl [predicate[@name = "=" and child::*[3]]] {
  msg terminate="yes" "We require that an equality predicate element have fewer than three children!";
}

tpl [predicate[@name = "="]] {
  "(";
  apply [*[1]];
  <span {
    @class = "predicate";
    " = ";
  }
  apply [*[2]];
  ")";
}

tpl [predicate[@name and not(@name = "=")]] {
  $n = `@name`;
  $constructor = `substring-before ($n, "_")`;
  $article = `substring-after ($n, "_")`;
  <span {
    @class = "predicate";
    <span {
      @class = "constructor";
      `$constructor`;
    }
    <sub {
      <span {
        @class = "article";
        `$article`;
      }
    }
  }
  "(";
  list (#separ = ", ", #elems = `*`);
  ")";
}

tpl [function[not(@name)]] {
  msg terminate="yes" "We require that a function have a name attribute!";
}

tpl [function[@name]] {
  $n = `@name`;
  $constructor = { if [contains ($n, "__")] {
                     `substring-before ($n, "__")`;
                   } else {
                     `substring-before ($n, "_")`;
                   }
                 }
  $article = { if [contains ($n, "__")] {
                 `substring-after ($n, "__")`;
               } else {
                 `substring-after ($n, "_")`;
               }
             }
  <span {
    @class = "function";
    <span {
      @class = "constructor";
      `$constructor`;
     }
    <sub {
      <span {
        @class = "article";
        `$article`;
      }
    }
  }
  if [*] {
    "("; list (#separ = ", ", #elems = `*`); ")";
  }
}

tpl [*[not(child::*[2])]] mode="binary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent binary connectives, but we have found such an element that lacks two children")`;
  msg terminate="yes" $message;
}

tpl [*[child::*[3]]] mode="binary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent binary connectives, but we have found such an element that has more than two children")`;
  msg terminate="yes" $message;
}

tpl [*] (#connective) mode="binary-connective" {
  <table {
    @class = "binary-connective";
    <tbody {
      <tr { <td { apply [*[1]]; } }
      <tr { <td { `$connective`; } }
      <tr { <td { apply [*[2]]; } }
    }
  }
}

tpl [implication] {
  apply [.] (#connective = "&#8594;") mode="binary-connective";
}

tpl [equivalence] {
  apply [.] (#connective = "&#8596;") mode="binary-connective";
}

tpl [disjunction] {
  apply [.] (#connective = "&#8744;") mode="binary-connective";
}

tpl [conjunction] {
  apply [.] (#connective = "&#8743;") mode="binary-connective";
}

// unary connectives

tpl [*[not(child::*)]] mode="unary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent unary connectives, but we have found such an element that lacks a child!")`;
  msg terminate="yes" $message;
}

tpl [*[child::*[3]]] mode="unary-connective" {
  $shape = `local-name (.)`;
  $message = `concat ("Elements of type '", $shape, "' are intended to represent unary connectives, but we have found such an element that has more than one child")`;
  msg terminate="yes" $message;
}

tpl [*] (#connective) mode="unary-connective" {
  <table {
    @class = "unary-connective";
    <tr {
      <td { `$connective`; }
      <td {
        @class = "formula";
        apply [*[1]];
      }
    }
  }
}

tpl [negation] {
  apply [.] (#connective = "&#172;") mode="unary-connective";
}

// quantifiers

tpl [quantifier[not(@type)]] {
  msg terminate="yes" "Quantifiers must have a type attribute, but we found one that lacks this attribute!";
}

tpl [quantifier[@type and not(@type = "universal" or @type = "existential")]] {
  msg terminate="yes" "We assume that quantifiers are either universal or existential!";
}

tpl [quantifer[not(child::variable)]] {
  msg terminate="yes" "We require that quantifiers have at least one variable child!";
}

tpl [quantifier[not(child::*[2])]] {
  msg terminate="yes" "We require that quantifiers have at least two child elements!";
}

tpl [quantifier[@type = "universal" or @type = "existential"]] {
  $type = `@type`;
  <table {
    @class = "formula";
    <tbody {
      <tr {
        <td {
          if [$type = "universal"] {
            "&#8704;";
          } else {
            "&#8707;";
          }
        }
        <td {
          @class = "variable-list";
          list (#elems = `variable`, #separ = ", ");
        }
        <td {
          @class = "quantifier-matrix";
          apply [*[position() = last()]];
        }
      }
    }
  }
}

// sources

tpl [*] mode="inference-references" {
  "References:";
  if [child::non-logical-data[@name = "inference"]/non-logical-data[position() = last()]/*] {
    <ul {
      for-each [non-logical-data[@name = "inference"]/non-logical-data[position() = last()]/*] {
        <li {
          apply [.] mode="link";
        }
      }
    }
  } else {
    <em { " (none)"; }
  }
}

tpl [*] mode="open-assumptions" {
  "Open assumptions:";
  if [descendant::non-logical-data[@name = "assumptions"]/non-logical-data/*] {
    <ul {
      for-each [descendant::non-logical-data[@name = "assumptions"]/non-logical-data/*] {
        <li {
          apply [.] mode="link";
        }
      }
    }
  } else {
    <em { " (none)"; }
  }
}

tpl [source[child::non-logical-data[@name = "introduced" and child::non-logical-data[@name = "assumption"] and child::non-logical-data[child::non-logical-data[@name = "file"]]]]] {
  $formula-name = `ancestor::formula/@name`;
  "Assumption about ";
  $first-char-as-string = `substring ($formula-name, 1, 1)`;
  choose {
    when [$first-char-as-string = "d"] {
      apply [non-logical-data[@name = "introduced"]/non-logical-data[position() = last()]/non-logical-data[@name = "file"]/non-logical-data[position() = last()]] mode="link";
    }
    when [$first-char-as-string = "e"] {
      $after-first-char = `substring-after ($formula-name, $first-char-as-string)`;
      $c-instead-of-e = `concat ("c", $after-first-char)`;
      $constant = `substring-before ($c-instead-of-e, "__")`;
      $article = `substring-after ($c-instead-of-e, "__")`;
      <a {
        @href = `concat ("#", $c-instead-of-e)`;
        <span {
          @class = "constructor";
          `$constant`;
        }
        <sub {
          <span {
            @class = "article";
            $article;
          }
        }
      }
    }
    otherwise {
      $message = `concat ("We assume that the first character of the name of an introduced assumption formula is either 'd' or 'e', but the first char of the current formula name '", $formula-name, "' is '", $first-char-as-string, "'")`;
      msg terminate="yes" $message;
    }
  }
}

tpl [source[child::non-logical-data[@name = "introduced" and child::non-logical-data[@name = "definition"] and child::non-logical-data[child::non-logical-data[@name = "new_symbol"]]]]] {
  "New constant: ";
  apply [non-logical-data[@name = "introduced"]/non-logical-data[position() = last()]/non-logical-data[@name = "new_symbol"]/non-logical-data[position() = last()]] mode="link";
}

tpl [source[child::non-logical-data[@name = "inference" and child::non-logical-data[@name = "discharge_asm"]]]] {
  <span {
    @class = "keyword";
    "discharge assumption";
  }
  <br;
  <br;
  apply [.] mode="inference-references";
  apply [.] mode="open-assumptions";
}

tpl [source[child::non-logical-data[@name = "inference" and child::non-logical-data[@name = "conclusion"]]]] {
  <span {
    @class = "keyword";
    "conclusion";
  }
  <br;
  <br;
  apply [.] mode="inference-references";
  apply [.] mode="open-assumptions";
}

tpl [source[child::non-logical-data[@name = "inference" and child::non-logical-data[@name = "mizar_by" or @name = "mizar_from"]]]] {
  <span {
    @class = "keyword";
    "by/from";
  }
  <br;
  <br;
  apply [.] mode="inference-references";
  apply [.] mode="open-assumptions";
}

tpl [source[child::non-logical-data[@name = "introduced" and child::non-logical-data[@name = "tautology"]]]] {
  "Reference: "; apply [non-logical-data[@name = "introduced"]/non-logical-data/non-logical-data[@name = "file"]/non-logical-data[position() = last()]] mode="link";
}

tpl [source[child::non-logical-data[@name = "file" and not(child::non-logical-data[2])]]] {
  msg terminate="yes" "We require that non-logical-data elements whose name is 'file' have at least two non-logical-data child elements!";
}

tpl first-numeral-helper (#string) {
  if [$string = ""] {
    msg terminate="yes" "We cannot determine the first numeral of the empty string!";
  } else {
    $first-char-as-string = `substring ($string, 1, 1)`;
    if [$first-char-as-string = "0"
        or $first-char-as-string = "1"
        or $first-char-as-string = "2"
        or $first-char-as-string = "3"
        or $first-char-as-string = "4"
        or $first-char-as-string = "5"
        or $first-char-as-string = "6"
        or $first-char-as-string = "7"
        or $first-char-as-string = "8"
        or $first-char-as-string = "9"] {
      $first-char-as-string;
    } else {
      first-numeral-helper (#string = `substring-after ($string, $first-char-as-string)`);
    }
  }
}

// the position of the first numeral in a string
tpl first-numeral (#string) {
  // sanity check: $string does contain a numeral
  if [contains ($string, "0")
      or contains ($string, "1")
      or contains ($string, "2")
      or contains ($string, "3")
      or contains ($string, "4")
      or contains ($string, "5")
      or contains ($string, "6")
      or contains ($string, "7")
      or contains ($string, "8")
      or contains ($string, "9")] {
    first-numeral-helper (#string = $string);
  } else {
    $message = `concat ("We cannot determine the first numeral of the string '", $string, "', because it contains no numerals")`;
    msg terminate="yes" $message;
  }
}

// extract the "K" and "CC" from strings like "K4" and "CC10"
tpl kind-from-kind-and-number (#string) {
  $first-numeral = first-numeral (#string = $string);
  `substring-before ($string, $first-numeral)`;
}

tpl [source[child::non-logical-data[@name = "file" and child::non-logical-data[not(@name)]]]] {
  msg terminate="yes" "We require that non-logical-data elements whose name is 'file' have non-logical-data child elements that have a name attribute!";
}

tpl [source[child::non-logical-data[@name = "file"]]] {
  $article = `non-logical-data[@name = "file"]/non-logical-data[1]/@name`;
  $fully-qualified-constructor = `non-logical-data[@name = "file"]/non-logical-data[2]/@name`;
  $kind-and-number = `substring-before ($fully-qualified-constructor, "_")`;
  $constructor-kind = kind-from-kind-and-number (#string = $kind-and-number);
  $constructor-kind-uc = uppercase (#string = $constructor-kind);
  $constructor-number = `substring-after ($kind-and-number, $constructor-kind)`;
  <a {
    @href = `concat ("http://mizar.org/version/current/html/", $article, ".html#", $constructor-kind-uc, $constructor-number)`;
   `concat ($constructor-kind, $constructor-number)`; " of ";
   <span {
    @class = "article";
    `$article`;
    }
  }
}

//////////////////////////////////////////////////////////////////////
/// Non-logical data
//////////////////////////////////////////////////////////////////////

tpl [non-logical-data[not(@name)]] {
  "["; list (#elems = `*`, #separ = ","); "]";
}

tpl [non-logical-data[@name and not(parent::source)]] {
  "[";
  $n = `@name`;
  if [@name and (key ("formulas", $n) or key ("symbols", $n))] {
    apply [.] mode="link";
  } else {
    `@name`;
  }
  for-each [non-logical-data] {
    apply [.];
    if [not(position()=last())] {
      ", ";
    }
  }
  "]";
}

tpl [non-logical-data[@name = "status"]] {
  // ignore
}

tpl [non-logical-data[descendant::non-logical-data[@name = "new_symbol"]]] {
  apply [descendant::non-logical-data[@name = "new_symbol"]];
}

tpl [non-logical-data[@name = "new_symbol"]] {
  $symbol = `non-logical-data[1]/@name`;
  "fresh symbol: ";
  <span {
    @class = "symbol";
    `$symbol`;
  }
}

tpl [non-logical-data[@name = "inference" and child::non-logical-data[@name = "let"]]] {
  <span {
    @class = "rule-of-inference";
    "&#8704;-I";
  }
  " from ";
  list (#elems = `*[position() = last()]/*`, #separ = ", ");

}

tpl [non-logical-data[not(@name)]] mode="link" {
  msg terminate="yes" "We cannot link a non-logical-data element that lacks a name attribute!";
}

tpl [non-logical-data[@name]] mode="link" {
  $n = `@name`;
  <a {
    @href = `concat ("#", $n)`;
    if [starts-with ($n, "c") and contains ($n, "__")] { // constant
      $constant = `substring-before ($n, "__")`;
      $article = `substring-after ($n, "__")`;
      <span {
        @class = "constructor";
        `$constant`;
      }
      <sub {
        <span {
          @class = "article";
          `$article`;
        }
      }
    } else {
      `$n`;
    }
  }
}

tpl [useful-info] {
  <div {
    @class = "useful-info";
    apply [*];
  }
}

tpl [number[not(@name)]] {
  msg terminate="yes" "We require that numbe elements have a name attribute!";
}

tpl [number[@name]] {
  `@name`;
}
