// nd.xsltxt : Transform mizar proofs into Gentzen-style natural deductions

stylesheet "1.0";

output method="xml" encoding="utf-8" indent="yes";

include ../utils/die.xsl;

tpl list (#separ, #elems) {
 for-each [$elems] {
  apply[.]; if [not(position()=last())] { copy-of $separ; } }
}

key "formulas" [/tstp/formula[@name]] `@name`;
key "symbols" [/tstp/formula/source[descendant::non-logical-data[@name = "new_symbol"]]] `descendant::non-logical-data[@name = "new_symbol"]/non-logical-data/@name`;

tpl [*] {
  $element = `local-name ()`;
  <$element {
    for-each [@*] { copy-of `.`; }
    apply [*];
  }
}

//////////////////////////////////////////////////////////////////////
// Sanity checks as templates
//////////////////////////////////////////////////////////////////////

tpl [formula[not(@name)]] mode="sanity-check" {
  die (#message = "We requre that formula elements have names");
}

tpl [formula[not(@status)]] mode="sanity-check" {
  die (#message = "We requre that formula elements have a status!");
}

tpl [formula[@status and not(@status = "plain"
                             or @status = "assumption"
                             or @status = "conjecture"
                             or @status = "negated_conjecture"
                             or @status = "definition"
                             or @status = "axiom"
                             or @status = "theorem")]] mode="sanity-check" {
  $status = `@status`;
  $message = `concat ("We know how to deal only with the with formula elements whose status is one of these kinds: plain, assumption, conjecture, negated_conjecture, definition, axiom, theorem.  The status of the current formula element is '", $status, "'")`;
  die (#message = $message);
}

tpl [/] mode="sanity-check" {
  apply [descendant::formula] mode="sanity-check";
}

tpl [/] {
  if [not(tstp)] {
    die (#message = "The required tstp element is missing!");
  }
  apply [.] mode="sanity-check";
  apply [tstp];
}

tpl [tstp] {
  if [not(formula)] {
    die (#message = "We require that a tstp element have at least one formula child element!");
  }
  apply [formula[position() = last()]];
}

tpl [formula[@name and source/non-logical-data[@name = "inference"]/non-logical-data[@name]]] {
  <Derivation {
    @"name" = `@name`;
    apply [*[1]]; // the actual formula
    <Rule {
      @"name" = `source/non-logical-data[@name = "inference"]/non-logical-data/@name`;
    }
    for-each [source/non-logical-data[@name = "inference"]/non-logical-data[position() = last()]/number[@name]] {
      $premise-name = `@name`;
      $premise = `key ("formulas", $premise-name)`;
      if [$premise] {
        apply [$premise];
      } else {
        <Deriviation {
          @"name" = $premise-name;
          <Rule {
            @"name" = "axiom";
          }
        }
      }
    }
  }
}

tpl [formula[@name and source/number[@name]]] {
  <Derivation {
    @"name" = `@name`;
    apply [*[1]]; // the actual formula
    <Rule {
      @"name" = "proof";
    }
    for-each [source/number[@name]] {
      $premise-name = `@name`;
      $premise = `key ("formulas", $premise-name)`;
      if [$premise] {
        apply [$premise];
      } else {
        <Deriviation {
          @"name" = $premise-name;
          <Rule {
            @"name" = "axiom";
          }
        }
      }
    }
  }
}

tpl [formula[@name and source/non-logical-data[@name = "file"]]] {
  <Derivation {
    @"name" = `@name`;
    apply [*[1]]; // the actual formula
    <Rule {
      @"name" = "axiom";
    }
  }
}
