stylesheet 1.0;

output method=xml indent="yes";

tpl die(#message) {
  if [@line and @col] {
    $line = `@line`;
    $col = `@col`;
    $final_message = `concat ($message, " (line ", $line, ", column ", $col, ")")`;
    msg terminate="yes" $final_message;
  } else {
    $final_message = `concat ($message, " (unable to determine line and column information)")`;
    msg terminate="yes" $final_message;
  }
}

tpl [*] {
  $element = `local-name ()`;
  <$element {
    if [@line] { @line = `@line`; }
    if [@col] { @col = `@col`; }
    if [@spelling] { @spelling = `@spelling`; }
    if [@idnr] { @idnr = `@idnr`; }
    if [@nr] { @nr = `@nr`; }
    if [@number] { @"number" = `@number`; }
    if [@articleid] { @articleid = `@articleid`; }
    if [@kind] { @kind = `@kind`; }
    apply [*];
  }
}

tpl enumerate-items (#candidates, #bundlenr, #articleid) {
  if [$candidates] {
    $candidate = `$candidates[1]`;
    apply [$candidate](#bundlenr = $bundlenr, #articleid = $articleid);
    for-each [$candidate] {
      if [position() != last()] {
        "\n";
      }
    }
    enumerate-items (#candidates = `$candidates[position () > 1]`,
                     #bundlenr = `$bundlenr + 1`,
                     #articleid = $articleid);
  }
}

tpl [Text-Proper] {
  <Items {
    enumerate-items (#candidates = `Item[@kind != "Reservation"]`,
                     #bundlenr = "1",
                     #articleid = `@articleid`);
  }
}

tpl [Text-Proper/Item](#bundlenr, #articleid) {
  <Item-Bundle {

    if [$bundlenr] {
      @bundlenr = $bundlenr;
    } else {
      die (#message = "Cannot process a top-level item without a bundle number");
    }

    if [$articleid] {
      @articleid = $articleid;
    } else {
      die (#message = "Cannot process a top-level item without an article id");
    }

    $context = `.`;

    <Text-Proper {
      for-each [preceding::Item[@kind="Reservation"]] {
        sort data-type="number" order="ascending";
        $idnr = `@idnr`;
        if [$context//Simple-Term[@idnr = $idnr] | $context//Implicitly-Qualified-Segment/Variable[@idnr = $idnr]] {
          copy-of `.`;
        }
      }
      copy {
        @kind = `@kind`; @line = `@line`; @col = `@col`;
        apply [*];
      }
    }
  }
}

tpl [Text-Proper/Item[@kind="Reservation"]] {
  if [Variable[2]] {
    die (#message = "We found a reservation that reserves more than one variable!");
  }
  if [not(@idnr)] {
    die (#message = "We found a reservation that lacks an idnr attribute!");
  }
}

// Resolving article-local references

tpl [Scheme-Justification[@nr = "0"]] {
  $context = `.`;
  if [@idnr] {
    $idnr = `@idnr`;
    if [ancestor::Text-Proper/Item[@kind = "Scheme-Block-Item"]/Block[@kind = "Scheme-Block"]/Item[@kind = "Scheme-Head"]/Scheme[@idnr = $idnr]] {
      $item = `ancestor::Text-Proper/Item[@kind = "Scheme-Block-Item"]/Block[@kind = "Scheme-Block"]/Item[@kind = "Scheme-Head"]/Scheme[@idnr = $idnr]/../../../../..`; // wow
      if [$item] {
        for-each [$item] {
          $position = `count (preceding-sibling::*) + 1`;
          $spelling = `concat ("CKB", $position)`;
          <Scheme-Justification {
            @spelling = $spelling;
            @promoted = "promoted";
            apply [`$context/*`];
          }
        }
      } else {
        $message = `concat ("Something went wrong when finding the Item-Bundle that defines the article-local scheme ", @spelling)`;
        die (#message = $message);
      }
    } else {
      die (#message = "Unable to resolve a reference to an article-local scheme because we are unable to find a previous scheme under the same name");
    }
  } else {
    die (#message = "We found a Scheme-Justification that lacks an idnr attribute!");
  }  
}

tpl [Local-Reference] {
  $context = `.`;
  if [@idnr and @line and @col and @spelling] {
    $idnr = `@idnr`;
    $line = `@line`;
    $col = `@col`;
    $spelling = `@spelling`;
    // look for a previous unexported toplevel theorem (lemma)
    if [ancestor::Text-Proper/Item[@kind = "Regular-Statement"]/Proposition/Label[@idnr = $idnr]] {
      $item = `ancestor::Text-Proper/Item[@kind = "Regular-Statement"]/Proposition/Label[@idnr = $idnr]/../..`; // wow
      if [$item] {
        for-each [$item] {
          $position = `count (preceding-sibling::*[not(@kind = "Reservation")]) + 1`;
          $new_spelling = `concat ("CKB", $position)`;
          <Local-Reference {
            @spelling = $new_spelling;
            @promoted = "promoted";
            apply [`$context/*`];
          }
        }
      } else {
        $message = `concat ("Something went wrong when finding the Item of kind Regular-Statement that defines the article-local reference ", @spelling)`;
        die (#message = $message);
      }
    } else {
      // look for a previous exported theorem
      if [ancestor::Text-Proper/Item[@kind = "Theorem-Item"]/Proposition/Label[@idnr = $idnr]] {
        $item = `ancestor::Text-Proper/Item[@kind = "Theorem-Item"]/Proposition/Label[@idnr = $idnr]/../..`; // wow
        if [$item] {
          for-each [$item] {
            $position = `count (preceding-sibling::*[not(@kind = "Reservation")]) + 1`;
            $new_spelling = `concat ("CKB", $position)`;
            <Local-Reference {
              @spelling = $new_spelling;
              @promoted = "promoted";
              apply [`$context/*`];
            }
          }
        } else {
          $message = `concat ("Something went wrong when finding the Item of kind Theorem-Item that defines the article-local reference ", @spelling)`;
          die (#message = $message);
        }
      } else {
        // look for a previous definition
        if [ancestor::Text-Proper/Item[@kind = "Definition-Item"]/Block[@kind = "Definitional-Block"]/Item[@kind = "Functor-Definition" or @kind = "Attribute-Definition" or @kind = "Predicate-Definition"]/Definiens/Label[@idnr = $idnr]] {
          $item = `ancestor::Text-Proper/Item[@kind = "Definition-Item"]/Block[@kind = "Definitional-Block"]/Item[@kind = "Functor-Definition" or @kind = "Attribute-Definition" or @kind = "Predicate-Definition"]/Definiens/Label[@idnr = $idnr]/../../../..`; // wow
          if [$item] {
            for-each [$item] {
              $position = `count (preceding-sibling::*[not(@kind = "Reservation")]) + 1`;
              $new_spelling = `concat ("CKB", $position)`;
              <Local-Reference {
                @spelling = $new_spelling;
                @promoted = "promoted";
                apply [`$context/*`];
              }
            }
          } else {
            $message = `concat ("Something went wrong when finding the Item of kind Definition-Item that defines the article-local reference ", @spelling)`;
            die (#message = $message);
          }
        } else {
          <Local-Reference {
            @line = $line;
            @col = $col;
            @spelling = $spelling;
            @idnr = $idnr;
            apply [*];
          }
        }
      }
    }
  } else {
    die (#message = "We found a Local-Reference item that lacks an idnr attribute!");
  }
}